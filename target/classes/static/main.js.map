{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/admin-panel/admin-panel.component.css","webpack:///./src/app/admin/admin-panel/admin-panel.component.html","webpack:///./src/app/admin/admin-panel/admin-panel.component.ts","webpack:///./src/app/app-nav-bar/app-nav-bar.component.css","webpack:///./src/app/app-nav-bar/app-nav-bar.component.html","webpack:///./src/app/app-nav-bar/app-nav-bar.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/common-components/modal-builder.ts","webpack:///./src/app/common-components/pipe/FilterPipe.ts","webpack:///./src/app/customer/customer-header/customer-header.component.css","webpack:///./src/app/customer/customer-header/customer-header.component.html","webpack:///./src/app/customer/customer-header/customer-header.component.ts","webpack:///./src/app/customer/customer-info/customer-info.component.css","webpack:///./src/app/customer/customer-info/customer-info.component.html","webpack:///./src/app/customer/customer-info/customer-info.component.ts","webpack:///./src/app/customer/customer-orders/customer-orders.component.css","webpack:///./src/app/customer/customer-orders/customer-orders.component.html","webpack:///./src/app/customer/customer-orders/customer-orders.component.ts","webpack:///./src/app/customer/customer-panel/customer-panel.component.css","webpack:///./src/app/customer/customer-panel/customer-panel.component.html","webpack:///./src/app/customer/customer-panel/customer-panel.component.ts","webpack:///./src/app/customer/list-customer/list-customer.component.css","webpack:///./src/app/customer/list-customer/list-customer.component.html","webpack:///./src/app/customer/list-customer/list-customer.component.ts","webpack:///./src/app/customer/new-customer/new-customer.component.css","webpack:///./src/app/customer/new-customer/new-customer.component.html","webpack:///./src/app/customer/new-customer/new-customer.component.ts","webpack:///./src/app/header-menu/header-menu.component.css","webpack:///./src/app/header-menu/header-menu.component.html","webpack:///./src/app/header-menu/header-menu.component.ts","webpack:///./src/app/modal/add-order-item-modal/add-order-item-modal.component.css","webpack:///./src/app/modal/add-order-item-modal/add-order-item-modal.component.html","webpack:///./src/app/modal/add-order-item-modal/add-order-item-modal.component.ts","webpack:///./src/app/modal/confirm-modal/confirm-modal-component.css","webpack:///./src/app/modal/confirm-modal/confirm-modal-component.html","webpack:///./src/app/modal/confirm-modal/confirm-modal-component.ts","webpack:///./src/app/modal/create-order-modal/create-order-modal.component.css","webpack:///./src/app/modal/create-order-modal/create-order-modal.component.html","webpack:///./src/app/modal/create-order-modal/create-order-modal.component.ts","webpack:///./src/app/modal/delete-order-items-modal/delete-order-items-modal.component.css","webpack:///./src/app/modal/delete-order-items-modal/delete-order-items-modal.component.html","webpack:///./src/app/modal/delete-order-items-modal/delete-order-items-modal.component.ts","webpack:///./src/app/modal/info-modal/info-modal.component.css","webpack:///./src/app/modal/info-modal/info-modal.component.html","webpack:///./src/app/modal/info-modal/info-modal.component.ts","webpack:///./src/app/modal/order-notification-modal/order-notification-modal.component.css","webpack:///./src/app/modal/order-notification-modal/order-notification-modal.component.html","webpack:///./src/app/modal/order-notification-modal/order-notification-modal.component.ts","webpack:///./src/app/modal/show-order-items-modal/show-order-items-modal.component.css","webpack:///./src/app/modal/show-order-items-modal/show-order-items-modal.component.html","webpack:///./src/app/modal/show-order-items-modal/show-order-items-modal.component.ts","webpack:///./src/app/model/AggregatedOrder.ts","webpack:///./src/app/model/AggregatedOrderInfo.ts","webpack:///./src/app/model/AggregatedOrderItem.ts","webpack:///./src/app/model/Customer.ts","webpack:///./src/app/model/Order.ts","webpack:///./src/app/model/OrderItem.ts","webpack:///./src/app/model/Owner.ts","webpack:///./src/app/model/Product.ts","webpack:///./src/app/model/ProductItem.ts","webpack:///./src/app/model/ProductStockInfo.ts","webpack:///./src/app/model/Store.ts","webpack:///./src/app/model/admin/AdminSetting.ts","webpack:///./src/app/model/request/customer/AddCustomerReq.ts","webpack:///./src/app/model/request/notification/NotificationRequest.ts","webpack:///./src/app/model/request/notification/OrderNotificationRequest.ts","webpack:///./src/app/model/request/order/AddOrderItemByBarCodeReq.ts","webpack:///./src/app/model/request/order/AddOrderItemReq.ts","webpack:///./src/app/model/request/order/DeleteOrderItemsReq.ts","webpack:///./src/app/order-panel/list-order-item/list-order-item.component.css","webpack:///./src/app/order-panel/list-order-item/list-order-item.component.html","webpack:///./src/app/order-panel/list-order-item/list-order-item.component.ts","webpack:///./src/app/order-panel/selected-order-items-list/selected-order-items-list.component.css","webpack:///./src/app/order-panel/selected-order-items-list/selected-order-items-list.component.html","webpack:///./src/app/order-panel/selected-order-items-list/selected-order-items-list.component.ts","webpack:///./src/app/order-panel/show-order-header/show-order-header.component.css","webpack:///./src/app/order-panel/show-order-header/show-order-header.component.html","webpack:///./src/app/order-panel/show-order-header/show-order-header.component.ts","webpack:///./src/app/order-panel/show-order/show-order.component.css","webpack:///./src/app/order-panel/show-order/show-order.component.html","webpack:///./src/app/order-panel/show-order/show-order.component.ts","webpack:///./src/app/orders-manager-panel/list-orders/list-orders.component.css","webpack:///./src/app/orders-manager-panel/list-orders/list-orders.component.html","webpack:///./src/app/orders-manager-panel/list-orders/list-orders.component.ts","webpack:///./src/app/orders-manager-panel/orders-manager/orders-manager.component.css","webpack:///./src/app/orders-manager-panel/orders-manager/orders-manager.component.html","webpack:///./src/app/orders-manager-panel/orders-manager/orders-manager.component.ts","webpack:///./src/app/service/admin-setting-service.ts","webpack:///./src/app/service/customer-service.ts","webpack:///./src/app/service/http-service.ts","webpack:///./src/app/service/notification-service.ts","webpack:///./src/app/service/order-service.ts","webpack:///./src/app/service/product-service.ts","webpack:///./src/app/shared.module.ts","webpack:///./src/app/util/StringUtil.ts","webpack:///./src/app/util/TypeUtil.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2FkbWluLXBhbmVsL2FkbWluLXBhbmVsLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <form [formGroup]=\\\"adminForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n      <div class=\\\"form-group\\\">\\n          <label class=\\\"form-check-label\\\" for=\\\"exampleCheck1\\\">Notification &nbsp;</label>\\n          <input type=\\\"checkbox\\\" formControlName=\\\"notification\\\" class=\\\"form-check-input\\\" (input)=\\\"settingChanged()\\\">\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"Email\\\">Email addresses\\n          <span style=\\\"font-size: 80%; font-style: italic\\\">(Use comma ',' delimiter for multiple emails)</span\\n        ></label>\\n        <input type=\\\"text\\\" formControlName=\\\"emails\\\"\\n          (input)=\\\"settingChanged()\\\"\\n          class=\\\"form-control\\\"\\n        />\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"ordersNbToShow\\\">Orders number to show by default</label>\\n        <input type=\\\"text\\\" formControlName=\\\"ordersNbToShow\\\"\\n          (input)=\\\"settingChanged()\\\"\\n          class=\\\"form-control\\\"\\n        />\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" [disabled]=\\\"saveButtonDisabled\\\">Save</button>\\n      </div>\\n    </form>\\n    <ngb-alert *ngIf=\\\"alertMessage\\\" type=\\\"success\\\" (close)=\\\"alertMessage = null\\\">{{ alertMessage }}</ngb-alert>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AdminSettingService } from '../../service/admin-setting-service'\nimport { AdminSetting } from 'src/app/model/admin/AdminSetting';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subject } from 'rxjs'\nimport { debounceTime } from 'rxjs/operators'\nimport { RGB } from 'src/app/model/RGB';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'admin-panel',\n  templateUrl: './admin-panel.component.html',\n  styleUrls: ['./admin-panel.component.css']\n})\nexport class AdminPanelComponent implements OnInit {\n\n  private _success = new Subject<string>()\n  private adminSetting: AdminSetting\n  private headerTableBackgroundColor: RGB\n  private headerTableTextColor: RGB\n  adminForm: FormGroup;\n  submitted = false;\n  saveButtonDisabled = true\n  alertMessage: string\n\n  constructor(private formBuilder: FormBuilder,\n              private adminSettingService: AdminSettingService) { }\n\n  ngOnInit() {\n    this.adminForm = this.formBuilder.group({\n      notification: [],\n      ordersNbToShow: ['', Validators.min(1)],\n      emails: ['', [Validators.required]]\n    });\n\n    this.adminSetting = new AdminSetting()\n    this.adminSettingService.getAdminSetting(this.adminSetting)\n        .subscribe(data => {\n          this.adminSetting.emails = data.emails\n          this.adminSetting.ordersNbToShow = data.ordersNbToShow\n          this.adminSetting.notifyOnCloseReport = data.notificationPolicy.onCloseReport\n\n          this.adminForm.setValue({\n            notification: this.adminSetting.notifyOnCloseReport,\n            emails: this.adminSetting.emails.join(),\n            ordersNbToShow: this.adminSetting.ordersNbToShow\n      })\n    })\n\n    this._success.subscribe((msg) => this.alertMessage = msg)\n    this._success.pipe(debounceTime(5000)).subscribe(() => this.alertMessage = null)\n  }\n\n  public changeAlertMessage() {\n    this._success.next(\"Setting saved successully\")\n  }\n\n  settingChanged() {\n    this.saveButtonDisabled = false\n  }\n\n  settingSaved(successfully: boolean) {\n    this.saveButtonDisabled = true\n    this.changeAlertMessage()\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.adminForm.controls; }\n\n  onSubmit() {\n      this.submitted = true;\n      if (this.adminForm.invalid) {\n          return;\n      }\n      let values = this.adminForm.value\n      this.adminSetting.emails = values.emails.split(\",\")\n      this.adminSetting.ordersNbToShow = values.ordersNbToShow\n      this.adminSetting.notifyOnCloseReport = values.notification\n      this.adminSettingService.updateAdminSetting(this.adminSetting).subscribe(data => {\n        this.adminSetting.emails = data.emails\n        this.adminSetting.ordersNbToShow = data.ordersNbToShow\n        this.adminSetting.notifyOnCloseReport = data.notificationPolicy.onCloseReport\n        this.settingSaved(true)\n    })\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC1uYXYtYmFyL2FwcC1uYXYtYmFyLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<nav class=\\\"navbar navbar-expand-md navbar-dark bg-primary fixed-top\\\">\\n    <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Andybrook</a>\\n    <button class=\\\"navbar-toggler hidden-sm-up\\\" type=\\\"button\\\" (click)=\\\"isNavbarCollapsed = !isNavbarCollapsed\\\" data-target=\\\"#navbarsDefault\\\" aria-controls=\\\"navbarsDefault\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\n    </button>\\n    <div [ngbCollapse]=\\\"isNavbarCollapsed\\\" class=\\\"collapse navbar-collapse\\\" id=\\\"navbarsDefault\\\">\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\n        <li class=\\\"nav-item\\\">\\n          <a class=\\\"nav-link\\\"\\n             routerLinkActive=\\\"active\\\"\\n             [routerLinkActiveOptions]=\\\"{exact: true}\\\"\\n             routerLink=\\\"/\\\"\\n          >Home</a>\\n        </li>\\n        <li class=\\\"nav-item dropdown\\\" ngbDropdown>\\n          <a class=\\\"nav-link dropdown-toggle\\\" id=\\\"id01\\\" ngbDropdownToggle>Customers</a>\\n          <div class=\\\"dropdown-menu\\\" aria-labelledby=\\\"id01\\\" ngbDropdownMenu>\\n            <a class=\\\"dropdown-item\\\" routerLink=\\\"/customer-dashboard\\\">Dashboard</a>\\n            <a class=\\\"dropdown-item\\\" routerLink=\\\"/new-customer\\\">New Customer</a>\\n          </div>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n          <a class=\\\"nav-link\\\"\\n             routerLink=\\\"/admin\\\"\\n          >Admin</a>\\n        </li>\\n      </ul>\\n    </div>\\n  </nav>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-app-nav-bar',\n  templateUrl: './app-nav-bar.component.html',\n  styleUrls: ['./app-nav-bar.component.css']\n})\nexport class AppNavBarComponent implements OnInit {\n\n  isNavbarCollapsed=true;\n  \n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<app-app-nav-bar></app-app-nav-bar>\\n<br>\\n<br>\\n<br>\\n<div class=\\\"container-fluid\\\">\\n    <router-outlet></router-outlet>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n}\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material'\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { HttpClientModule } from '@angular/common/http'\nimport { Routes, RouterModule } from '@angular/router'\nimport { BrowserAnimationsModule, NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppComponent } from './app.component';\nimport { ListOrderItemComponent } from './order-panel/list-order-item/list-order-item.component';\nimport { OrdersManagerComponent } from './orders-manager-panel/orders-manager/orders-manager.component';\nimport { ShowOrderComponent } from './order-panel/show-order/show-order.component';\nimport { OrderService } from './service/order-service';\nimport { HttpService } from './service/http-service';\nimport { AdminSettingService } from './service/admin-setting-service';\nimport { HeaderMenuComponent } from './header-menu/header-menu.component';\nimport { OrderHeaderComponent } from './order-panel/show-order-header/show-order-header.component';\nimport { ListOrdersComponent } from './orders-manager-panel/list-orders/list-orders.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { AdminPanelComponent } from './admin/admin-panel/admin-panel.component';\nimport { SharedModule } from './shared.module';\nimport { CustomerPanelComponent } from './customer/customer-panel/customer-panel.component';\nimport { NotificationService } from './service/notification-service';\nimport { AppNavBarComponent } from './app-nav-bar/app-nav-bar.component';\nimport { ConfirmModalComponent } from './modal/confirm-modal/confirm-modal-component';\nimport { ModalBuilder } from './common-components/modal-builder';\nimport { CreateOrderModalComponent } from './modal/create-order-modal/create-order-modal.component';\nimport { CustomerService } from './service/customer-service';\nimport { InfoModalComponent } from './modal/info-modal/info-modal.component';\nimport { ProductService } from './service/product-service';\nimport { ShowOrderItemsModalComponent } from './modal/show-order-items-modal/show-order-items-modal.component';\nimport { SelectedOrderItemsListComponent } from './order-panel/selected-order-items-list/selected-order-items-list.component';\nimport { DeleteOrderItemsModalComponent } from './modal/delete-order-items-modal/delete-order-items-modal.component';\nimport { AddOrderItemModalComponent } from './modal/add-order-item-modal/add-order-item-modal.component';\nimport { CookieService } from 'ngx-cookie-service';\nimport { ListCustomerComponent } from './customer/list-customer/list-customer.component';\nimport { CustomerOrdersComponent } from './customer/customer-orders/customer-orders.component';\nimport { CustomerInfoComponent } from './customer/customer-info/customer-info.component';\nimport { CustomerHeaderComponent } from './customer/customer-header/customer-header.component';\nimport { NewCustomerComponent } from './customer/new-customer/new-customer.component';\nimport { OrderNotificationModalComponent } from './modal/order-notification-modal/order-notification-modal.component';\n\nconst appRoutes: Routes = [\n  { path: '', component: OrdersManagerComponent },\n  { path: 'order/:id', component: ShowOrderComponent },\n  { path: 'admin', component: AdminPanelComponent},\n  { path: 'new-customer', component: NewCustomerComponent},\n  { path: 'customer-dashboard', component: CustomerPanelComponent}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListOrderItemComponent,\n    OrdersManagerComponent,\n    ShowOrderComponent,\n    HeaderMenuComponent,\n    OrderHeaderComponent,\n    ListOrdersComponent,\n    AdminPanelComponent,\n    CustomerPanelComponent,\n    AppNavBarComponent,\n    ConfirmModalComponent,\n    CreateOrderModalComponent,\n    InfoModalComponent,\n    ShowOrderItemsModalComponent,\n    SelectedOrderItemsListComponent,\n    DeleteOrderItemsModalComponent,\n    AddOrderItemModalComponent,\n    ListCustomerComponent,\n    CustomerOrdersComponent,\n    CustomerInfoComponent,\n    CustomerHeaderComponent,\n    NewCustomerComponent,\n    OrderNotificationModalComponent,\n  ],\n  entryComponents: [\n    CreateOrderModalComponent,\n    ConfirmModalComponent,\n    InfoModalComponent,\n    ShowOrderItemsModalComponent,\n    DeleteOrderItemsModalComponent,\n    AddOrderItemModalComponent,\n    OrderNotificationModalComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    MatToolbarModule,\n    MatDialogModule,\n    BrowserAnimationsModule,\n    NoopAnimationsModule,\n    ReactiveFormsModule,\n    NgbModule,\n    SharedModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [\n    OrderService,\n    HttpService,\n    AdminSettingService,\n    NotificationService,\n    ModalBuilder,\n    CustomerService,\n    ProductService,\n    CookieService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\nimport { Component } from '@angular/compiler/src/core';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ModalBuilder {\n\n    constructor(private modalService: NgbModal) {\n\n    }\n\n    open(component: any): NgbModalRef  {\n        return this.modalService.open(component)\n    }\n\n    openCenteredLargeModal(component: any): NgbModalRef {\n        return this.modalService.open(component, {size: 'lg', centered: true})\n    }\n\n    openCenteredModal(component: any): NgbModalRef {\n        return this.modalService.open(component, {centered: true})\n    }\n}","import {Pipe, PipeTransform, Injectable } from '@angular/core'\n\n@Pipe({\n    name: 'filter',\n})\n@Injectable()\nexport class FilterPipe implements PipeTransform {\n\n    transform(items: IterableIterator<any>, field: string, value: string): Array<any> {\n        if (!items) {\n            return new Array[0]\n        }\n        let array = Array.from(items)\n        if (!field || !value) {\n            return array\n        }\n        return array.filter(\n            singleTerm => singleTerm['product'][field].toLowerCase().includes(value.toLowerCase())\n        )\n    }\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyL2N1c3RvbWVyLWhlYWRlci9jdXN0b21lci1oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'customer-header',\n  templateUrl: './customer-header.component.html',\n  styleUrls: ['./customer-header.component.css']\n})\nexport class CustomerHeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyL2N1c3RvbWVyLWluZm8vY3VzdG9tZXItaW5mby5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h5>Store Information</h5>\\n<hr>\\n<div>\\n  <label>ID : {{ customer.id }}</label>\\n  <br>\\n  <label>Store : {{ customer.store.name }}</label>\\n  <br>\\n  <label>Address : {{ customer.store.address }}</label>\\n  <br>\\n  <label>Phone : {{ customer.store.phone }}</label>\\n  <br>\\n  <label>Email : {{ customer.store.email }}</label>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Customer } from 'src/app/model/Customer';\n\n@Component({\n  selector: 'customer-info',\n  templateUrl: './customer-info.component.html',\n  styleUrls: ['./customer-info.component.css']\n})\nexport class CustomerInfoComponent implements OnInit {\n\n  @Input() customer: Customer\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"/* Scroll Bar Aggregated Order Item table */\\n.my-custom-scrollbar {\\n    position: relative;\\n    max-height: 35%;\\n    overflow: auto;\\n  }\\n.table-wrapper-scroll-y {\\n    display: block;\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3VzdG9tZXIvY3VzdG9tZXItb3JkZXJzL2N1c3RvbWVyLW9yZGVycy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJDQUEyQztBQUMzQztJQUNJLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsY0FBYztFQUNoQjtBQUVBO0lBQ0UsY0FBYztFQUNoQiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyL2N1c3RvbWVyLW9yZGVycy9jdXN0b21lci1vcmRlcnMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIFNjcm9sbCBCYXIgQWdncmVnYXRlZCBPcmRlciBJdGVtIHRhYmxlICovXG4ubXktY3VzdG9tLXNjcm9sbGJhciB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG1heC1oZWlnaHQ6IDM1JTtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxuICBcbiAgLnRhYmxlLXdyYXBwZXItc2Nyb2xsLXkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9Il19 */\"","module.exports = \"<h5>Orders ({{ orders.length }})</h5>\\n<div class=\\\"table-responsive table-wrapper-scroll-y my-custom-scrollbar\\\">\\n  <table class=\\\"table table-striped table-bordered table-sm\\\">\\n      <thead>\\n          <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Status</th>\\n              <th>Products</th>\\n              <th>Qty</th>\\n              <th>Amount</th>\\n              <th>Creation</th>\\n              <th></th>\\n          </tr>\\n      </thead>\\n      <tbody>\\n          <tr *ngFor=\\\"let order of orders\\\">\\n              <td>{{ order.id }}</td>\\n              <td>{{ order.name }}</td>\\n              <td [ngClass]=\\\"order.status === 'OPEN' ? 'table-success' : 'table-danger'\\\">{{ order.status }}</td>\\n              <td>{{ order.aggregatedOrderInfo.productSize }}</td>\\n              <td>{{ order.aggregatedOrderInfo.orderItemSize }}</td>\\n              <td>{{ order.aggregatedOrderInfo.totalPrice }} €</td>\\n              <td>{{ order.createdDatetime  | date:'shortDate' }}</td>\\n              <td>\\n                <button\\n                    class=\\\"btn btn-success btn-sm\\\"\\n                    [routerLink]=\\\"['/order', order.id]\\\"\\n                >See</button>\\n              </td>\\n          </tr>\\n      </tbody>\\n  </table>\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\nimport { OrderService } from 'src/app/service/order-service';\n\n@Component({\n  selector: 'customer-orders',\n  templateUrl: './customer-orders.component.html',\n  styleUrls: ['./customer-orders.component.css']\n})\nexport class CustomerOrdersComponent implements OnInit {\n\n  @Input() orders: AggregatedOrder[] = []\n\n  constructor(private orderService: OrderService) { }\n\n  ngOnInit() {\n  }\n\n  \n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyL2N1c3RvbWVyLXBhbmVsL2N1c3RvbWVyLXBhbmVsLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"row\\\">\\n  <customer-header></customer-header>\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-auto\\\">\\n    <list-customer (onCustomerSelected)=\\\"onCustomerSelected($event)\\\"></list-customer>\\n  </div>\\n  <div class=\\\"col\\\">\\n    <customer-info [customer]=\\\"customer\\\"></customer-info>\\n    <hr>\\n    <customer-orders [orders]=\\\"orders\\\"></customer-orders>\\n  </div>\\n</div>\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\nimport { OrderService } from 'src/app/service/order-service';\nimport { Customer } from 'src/app/model/Customer';\n\n@Component({\n  selector: 'customer-panel',\n  templateUrl: './customer-panel.component.html',\n  styleUrls: ['./customer-panel.component.css']\n})\nexport class CustomerPanelComponent implements OnInit {\n\n  customer: Customer\n  orders: AggregatedOrder[] = []\n\n  constructor(private orderService: OrderService) { }\n\n  ngOnInit() {\n    \n  }\n\n  onCustomerSelected(event) {\n    this.customer = event;\n    this.loadOrders(event.id);\n  }\n\n  private loadOrders(customerId: number) {\n    this.orderService.getOrdersOfCustomer(customerId).subscribe(\n      data => {\n        let arr: AggregatedOrder[] = [];\n        for (let order of data) {\n          arr.push(AggregatedOrder.fromJson(order));\n        }\n        this.orders = arr;\n      }\n    )\n  }\n\n}\n","module.exports = \"/* Scroll Bar customer list table */\\n.my-custom-scrollbar {\\n    position: relative;\\n    max-height: 45%;\\n    overflow: auto;\\n  }\\n.table-wrapper-scroll-y {\\n    display: block;\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3VzdG9tZXIvbGlzdC1jdXN0b21lci9saXN0LWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUNBQW1DO0FBQ25DO0lBQ0ksa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixjQUFjO0VBQ2hCO0FBRUE7SUFDRSxjQUFjO0VBQ2hCIiwiZmlsZSI6InNyYy9hcHAvY3VzdG9tZXIvbGlzdC1jdXN0b21lci9saXN0LWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBTY3JvbGwgQmFyIGN1c3RvbWVyIGxpc3QgdGFibGUgKi9cbi5teS1jdXN0b20tc2Nyb2xsYmFyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbWF4LWhlaWdodDogNDUlO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICB9XG4gIFxuICAudGFibGUtd3JhcHBlci1zY3JvbGwteSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH0iXX0= */\"","module.exports = \"<h5>Customers</h5>\\n<div class=\\\"table-responsive table-wrapper-scroll-y my-custom-scrollbar\\\">\\n  <table class=\\\"table table-striped table-hover\\\">\\n    <thead>\\n      <tr>\\n        <th>ID</th>\\n        <th>Store</th>\\n        <th>Owner</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let customer of customers\\\" (click)=\\\"onClickCustomer(customer)\\\">\\n        <td>{{ customer.id }}</td>\\n        <td>{{ customer.store.name }}</td>\\n        <td>{{ customer.store.owner.firstName + \\\" \\\" + customer.store.owner.lastName }}</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\"","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Customer } from 'src/app/model/Customer';\nimport { ModalBuilder } from 'src/app/common-components/modal-builder';\nimport { CustomerService } from 'src/app/service/customer-service';\nimport { InfoModalComponent } from 'src/app/modal/info-modal/info-modal.component';\n\n@Component({\n  selector: 'list-customer',\n  templateUrl: './list-customer.component.html',\n  styleUrls: ['./list-customer.component.css']\n})\nexport class ListCustomerComponent implements OnInit {\n\n  @Output() onCustomerSelected = new EventEmitter<Customer>()\n  customers: Customer[] = [];\n\n  constructor(private customerService: CustomerService,\n              private modalBuilder: ModalBuilder) { }\n\n  ngOnInit() {\n    this.customerService.getAllCustomers().subscribe(\n      data => {\n        for (let customer of data) {\n          this.customers.push(Customer.fromJson(customer));\n        }\n      },\n      error => {\n        const modalRef = this.modalBuilder.open(InfoModalComponent)\n        modalRef.componentInstance.title = \"Cannot load the customers.\";\n        modalRef.componentInstance.message = error.error\n      }\n    )\n  }\n\n  onClickCustomer(customer: Customer) {\n    this.onCustomerSelected.emit(customer);\n  }\n}\n","module.exports = \".ng-invalid:not(form)  {\\n    border-left: 5px solid #a94442; /* red */\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3VzdG9tZXIvbmV3LWN1c3RvbWVyL25ldy1jdXN0b21lci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksOEJBQThCLEVBQUUsUUFBUTtBQUM1QyIsImZpbGUiOiJzcmMvYXBwL2N1c3RvbWVyL25ldy1jdXN0b21lci9uZXctY3VzdG9tZXIuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5uZy1pbnZhbGlkOm5vdChmb3JtKSAge1xuICAgIGJvcmRlci1sZWZ0OiA1cHggc29saWQgI2E5NDQ0MjsgLyogcmVkICovXG59Il19 */\"","module.exports = \"<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <h5>Owner</h5>\\n  <hr>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col form-group\\\">\\n      <label for=\\\"newowner\\\">New Owner &nbsp;</label>\\n      <input type=\\\"checkbox\\\" formControlName=\\\"isNewOwnerCheckbox\\\" (click)=\\\"onClickNewOwnerCheckbox($event)\\\">\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div *ngIf=\\\"! showCreateOwnerForm\\\" class=\\\"col-5 form-group\\\">\\n      <label for=\\\"Name\\\">Select an existing owner :</label>\\n      <input type=\\\"text\\\" formControlName=\\\"ownerAutoComplete\\\"\\n        (blur)=\\\"onBlurOwnerAutoComplete()\\\"\\n        [(ngModel)]=\\\"inputOwnerName\\\"\\n        [ngbTypeahead]=\\\"search\\\"\\n        class=\\\"form-control\\\"/>\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"storesOfSelectedOwner.length > 0\\\" class=\\\"row\\\">\\n    <div class=\\\"col-5\\\">\\n      <table class=\\\"table table-striped table-bordered table-sm\\\">\\n        <thead>\\n          <tr>\\n            <th>#</th>\\n            <th>Id</th>\\n            <th>Name</th>\\n            <th>Email</th>\\n            <th>Phone</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let store of storesOfSelectedOwner; let i = index\\\">\\n            <td>{{ i + 1 }}</td>\\n            <td>{{ store.id }}</td>\\n            <td>{{ store.name }}</td>\\n            <td>{{ store.email }}</td>\\n            <td>{{ store.phone }}</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"showCreateOwnerForm\\\" class=\\\"row\\\">\\n    <div class=\\\"col form-group\\\">\\n      <label for=\\\"compagnyName\\\">Compagny Nane</label>\\n      <input type=\\\"text\\\" formControlName=\\\"ownerCompagnyName\\\" class=\\\"form-control\\\" (blur)=onBlurStringFormControl($event)/>\\n    </div>\\n    <div class=\\\"col form-group\\\">\\n        <label for=\\\"firstName\\\">FirstName</label>\\n        <input type=\\\"text\\\" formControlName=\\\"ownerFirstName\\\" class=\\\"form-control\\\" (blur)=onBlurStringFormControl($event)/>\\n    </div>\\n    <div class=\\\"col form-group\\\">\\n        <label for=\\\"lastName\\\">LastName</label>\\n        <input type=\\\"text\\\" formControlName=\\\"ownerLastName\\\" class=\\\"form-control\\\" (blur)=onBlurStringFormControl($event)/>\\n    </div>\\n    <div class=\\\"col form-group\\\">\\n        <label for=\\\"email\\\">Email</label>\\n        <input type=\\\"text\\\" formControlName=\\\"ownerEmail\\\" class=\\\"form-control\\\" (blur)=onBlurLowcaseStringFormControl($event)/>\\n    </div>\\n  </div>\\n  <br>\\n  <h5>Store</h5>\\n  <hr>\\n  <div class=\\\"row\\\">\\n      <div class=\\\"col form-group\\\">\\n          <label for=\\\"name\\\">Name</label>\\n          <input type=\\\"text\\\" formControlName=\\\"storeName\\\" class=\\\"form-control\\\" (blur)=onBlurStringFormControl($event)/>\\n      </div>\\n      <div class=\\\"col form-group\\\">\\n          <label for=\\\"address\\\">Address</label>\\n          <input type=\\\"text\\\" formControlName=\\\"storeAddress\\\" class=\\\"form-control\\\"/>\\n      </div>\\n      <div class=\\\"col form-group\\\">\\n          <label for=\\\"zipCode\\\">Zip Code</label>\\n          <input type=\\\"text\\\" formControlName=\\\"storeZipCode\\\" class=\\\"form-control\\\"/>\\n      </div>\\n      <div class=\\\"col form-group\\\">\\n          <label for=\\\"city\\\">City</label>\\n          <input type=\\\"text\\\" formControlName=\\\"storeCity\\\" class=\\\"form-control\\\" (blur)=onBlurStringFormControl($event)/>\\n      </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n      <div class=\\\"col form-group\\\">\\n          <label for=\\\"phone\\\">Phone</label>\\n          <input type=\\\"text\\\" formControlName=\\\"storePhone\\\" class=\\\"form-control\\\"/>\\n      </div>\\n      <div class=\\\"col form-group\\\">\\n          <label for=\\\"email\\\">Email</label>\\n          <input type=\\\"text\\\" formControlName=\\\"storeEmail\\\" class=\\\"form-control\\\" (blur)=onBlurLowcaseStringFormControl($event)>\\n      </div>\\n  </div>\\n  <hr>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <button class=\\\"btn btn-primary\\\" type=\\\"submit\\\">Add Customer</button>\\n    </div>\\n    <div class=\\\"col-md-auto\\\">\\n      <ngb-alert *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\" [dismissible]=\\\"true\\\" (close)=\\\"errorMessage = null\\\">{{ errorMessage }}</ngb-alert>\\n    </div>\\n  </div>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { CustomerService } from 'src/app/service/customer-service';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { AddCustomerReq } from 'src/app/model/request/customer/AddCustomerReq';\nimport { Store } from 'src/app/model/Store';\nimport { ModalBuilder } from 'src/app/common-components/modal-builder';\nimport { InfoModalComponent } from 'src/app/modal/info-modal/info-modal.component';\nimport { StringUtil } from 'src/app/util/StringUtil';\n\n@Component({\n  selector: 'new-customer',\n  templateUrl: './new-customer.component.html',\n  styleUrls: ['./new-customer.component.css']\n})\nexport class NewCustomerComponent implements OnInit {\n\n  form: FormGroup\n  showCreateOwnerForm: boolean\n  inputOwnerName: string\n  ownerNames: string[] = []\n  ownerIdMapByName: Map<string, number>\n  errorMessage: string\n  storesOfSelectedOwner: Store[] = []\n  private _error = new Subject<string>()\n\n  constructor(private formBuilder: FormBuilder,\n              private modalBuilder: ModalBuilder,\n              private customerService: CustomerService) {}\n\n  ngOnInit() {\n    this.ownerIdMapByName = new Map();\n    this.initForm();\n    this._error.subscribe((msg) => this.errorMessage = msg);\n    this._error.pipe(debounceTime(4000)).subscribe(() => this.errorMessage = null);\n  }\n\n  initForm() {\n    this.showCreateOwnerForm = false;\n    this.loadOwners();\n    this.form = this.formBuilder.group({\n      ownerAutoComplete: [''],\n      isNewOwnerCheckbox: [],\n      ownerCompagnyName: [''],\n      ownerFirstName: [''],\n      ownerLastName: [''],\n      ownerEmail: ['', Validators.email],\n      storeName: ['', Validators.required],\n      storeAddress: [''],\n      storeZipCode: [''],\n      storeCity: [''],\n      storePhone: [''],\n      storeEmail: ['', Validators.email]\n    });\n  }\n\n  loadOwners() {\n    this.customerService.getAllOwnersIdsAndNames().subscribe(\n      data => {\n        for (let owner of data) {\n          this.ownerIdMapByName.set(owner.second, owner.first);\n          this.ownerNames.push(owner.second);\n        }\n      }\n    )\n  }\n\n  onBlurStringFormControl(event) {\n    event.srcElement.value = StringUtil.capitalFirstLetter(event.srcElement.value);\n  }\n\n  onBlurLowcaseStringFormControl(event) {\n    event.srcElement.value = event.srcElement.value.toLowerCase();\n  }\n\n  search = (text$: Observable<string>) =>\n    text$.pipe(\n      debounceTime(200),\n      distinctUntilChanged(),\n      map(term => term.length < 1 ? []\n        : this.ownerNames.filter(v => v.toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10))\n  )\n\n  onClickNewOwnerCheckbox(event) {\n    let controls = this.form.controls;\n    controls.ownerAutoComplete.reset();\n    this.showCreateOwnerForm = event.currentTarget.checked;\n    if (this.showCreateOwnerForm) {\n      controls.ownerAutoComplete.setValidators(null);\n      controls.ownerCompagnyName.setValidators(Validators.required);\n    } else {\n      controls.ownerAutoComplete.setValidators(Validators.required);\n      controls.ownerCompagnyName.setValidators(null);\n    }\n    this.storesOfSelectedOwner = [];\n  }\n\n  onBlurOwnerAutoComplete() {\n    let ownerNameSelected = this.form.controls.ownerAutoComplete.value;\n    let ownerId = this.ownerIdMapByName.get(ownerNameSelected);\n    if (ownerId != null) {\n      this.customerService.getStoresOfOwner(ownerId).subscribe(\n        data => {\n          for (let store of data) {\n            this.storesOfSelectedOwner.push(Store.fromJson(store));\n          }\n        }, error => {\n          const modalRef = this.modalBuilder.open(InfoModalComponent);\n          modalRef.componentInstance.title = '';\n          modalRef.componentInstance.message = 'Cannot load the stores of the owner : ' + ownerNameSelected; \n        }\n      )\n    } else {\n      this.storesOfSelectedOwner = [];\n    }\n  }\n\n  private changeErrorMessage(errorMessage: string) {\n    this._error.next(errorMessage);\n  }\n\n  onSubmit() {\n    let controls = this.form.controls;\n    if (this.form.valid) {\n      let ownerId, ownerFirstName, ownerLastName, ownerEmail, ownerCompagnyName;\n      let storeName, storeAddress, storePhone, storeEmail;\n      if (controls.isNewOwnerCheckbox.value) {\n        ownerFirstName = controls.ownerFirstName.value;\n        ownerCompagnyName = controls.ownerCompagnyName.value;\n        ownerLastName = controls.ownerLastName.value;\n        ownerEmail = controls.ownerEmail.value;\n      } else {\n        ownerId = this.ownerIdMapByName.get(controls.ownerAutoComplete.value);\n        if (ownerId == null) {\n          // do validator \n        }\n      }\n      storeName = controls.storeName.value;\n      storeAddress = controls.storeAddress.value + ' - ' + controls.storeZipCode.value + ' ' + controls.storeCity.value;\n      storePhone = controls.storePhone.value;\n      storeEmail = controls.storeEmail.value;\n      let req = new AddCustomerReq(ownerId, storeName);\n      req.ownerCompagnyName = ownerCompagnyName;\n      req.ownerFirstName = ownerFirstName;\n      req.ownerLastName = ownerLastName;\n      req.ownerEmail = ownerEmail;\n      req.storeAddress = storeAddress;\n      req.storeEmail = storeEmail;\n      req.storePhone = storePhone;\n      this.customerService.addCustomer(req).subscribe(\n        data => {\n          this.form.reset();\n          this.storesOfSelectedOwner = [];\n        },\n        error => {\n          this.changeErrorMessage(error.error);\n        }\n      );\n    } else {\n      this.changeErrorMessage(\"Form not valid.\");\n    }\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2hlYWRlci1tZW51L2hlYWRlci1tZW51LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<p>\\n  header-menu works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header-menu',\n  templateUrl: './header-menu.component.html',\n  styleUrls: ['./header-menu.component.css']\n})\nexport class HeaderMenuComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL2FkZC1vcmRlci1pdGVtLW1vZGFsL2FkZC1vcmRlci1pdGVtLW1vZGFsLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">Add order items</h5>\\n    <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"onClose()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <form [formGroup]=\\\"addOrderItemForm\\\">\\n    <div class=\\\"custom-control custom-switch\\\" style=\\\"float: right\\\">\\n      <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" id=\\\"customSwitch1\\\" (click)=\\\"shouldEnableBarCodeMode($event)\\\" [(ngModel)]=\\\"barCodeMode\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n      <label class=\\\"custom-control-label\\\" for=\\\"customSwitch1\\\">Barcode Mode</label>\\n    </div>\\n    <div *ngIf=\\\"barCodeMode\\\">\\n      <div class=\\\"form-group\\\">\\n          <label for=\\\"barCode\\\">BarCode</label>\\n          <input type=\\\"text\\\" formControlName=\\\"barCode\\\"\\n            (change)=\\\"onValueChange()\\\"\\n            (blur)=\\\"onBlurBarCode()\\\"\\n            class=\\\"form-control\\\"/>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"! barCodeMode\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"Name\\\">Product Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"productName\\\"\\n          [(ngModel)]=\\\"inputProductName\\\"\\n          [ngbTypeahead]=\\\"search\\\"\\n          (change)=\\\"onProductNameChange()\\\"\\n          (blur)=\\\"onBlurProductName()\\\"\\n          class=\\\"form-control\\\"/>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"quantity\\\">Quantity</label>\\n        <input type=\\\"number\\\" formControlName=\\\"quantity\\\"\\n          (change)=\\\"onValueChange()\\\"\\n          class=\\\"form-control\\\"/>\\n      </div>\\n    </div>\\n    <div *ngIf=\\\"productStockInfo\\\">\\n      <table class=\\\"table table-striped\\\">\\n        <thead>\\n          <tr>\\n            <th>Id</th>\\n            <th>Name</th>\\n            <th>Initial Qty</th>\\n            <th>Free Qty</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr>\\n            <td>{{ productStockInfo.product.id }}</td>\\n            <td>{{ productStockInfo.product.name }}</td>\\n            <td>{{ productStockInfo.createdQuantity }}</td>\\n            <td>{{ productStockInfo.createdQuantity - productStockInfo.usedQuantity }}</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div *ngIf=\\\"productItem\\\">\\n      <table class=\\\"table table-striped\\\">\\n        <thead>\\n          <tr>\\n            <th>Id</th>\\n            <th>Name</th>\\n            <th>Free</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr>\\n            <td>{{ productItem.id }}</td>\\n            <td>{{ productItem.product.name }}</td>\\n            <td>{{ productItem.orderItemId ? 'No' : 'Yes' }}</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n  </form>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-auto\\\">\\n            <ngb-alert *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\" [dismissible]=\\\"true\\\" (close)=\\\"errorMessage = null\\\">{{ errorMessage }}</ngb-alert>\\n        </div>\\n        <div class=\\\"col\\\">\\n          <button class=\\\"btn btn-outline-dark\\\" type=\\\"button\\\" [disabled]=\\\"isAddButtonDisabled\\\" (click)=\\\"onSubmit()\\\" style=\\\"float:right\\\">\\n              <span *ngIf=\\\"addOrderItemInProgress\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>\\n            Add</button>\\n        </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { OrderService } from 'src/app/service/order-service';\nimport { AddOrderItemReq } from 'src/app/model/request/order/AddOrderItemReq';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ProductService } from 'src/app/service/product-service';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { ProductStockInfo } from 'src/app/model/ProductStockInfo';\nimport { AddOrderItemByBarCodeReq } from 'src/app/model/request/order/AddOrderItemByBarCodeReq';\nimport { TypeUtil } from 'src/app/util/TypeUtil';\nimport { ProductItem } from 'src/app/model/ProductItem';\n\n@Component({\n  selector: 'add-order-item-modal',\n  templateUrl: './add-order-item-modal.component.html',\n  styleUrls: ['./add-order-item-modal.component.css']\n})\nexport class AddOrderItemModalComponent implements OnInit {\n\n  @Input() orderId: number\n\n  addOrderItemForm: FormGroup\n  addOrderItemInProgress: boolean\n  isAddButtonDisabled: boolean\n  barCodeMode: boolean\n  productNames: string[] = []\n  productIdMapByName: Map<string, number> = new Map()\n  inputProductName: string\n  productStockInfo: ProductStockInfo\n  productItem: ProductItem\n  errorMessage: string\n  private _error = new Subject<string>()\n\n  constructor(private formBuilder: FormBuilder,\n              private modal: NgbActiveModal,\n              private cookieService: CookieService,\n              private productService: ProductService,\n              private orderService: OrderService) {}\n\n  ngOnInit() {\n    this.initBarCodeMode();\n    this.initForm();\n    this.getAllCustomers();\n    this._error.subscribe((msg) => this.errorMessage = msg);\n    this._error.pipe(debounceTime(4000)).subscribe(() => this.errorMessage = null);\n  }\n\n  search = (text$: Observable<string>) =>\n    text$.pipe(\n      debounceTime(200),\n      distinctUntilChanged(),\n      map(term => term.length < 1 ? []\n        : this.productNames.filter(v => v.toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10))\n  )\n\n  onProductNameChange() {\n    this.onValueChange();\n    this.productStockInfo = null;\n  }\n\n  onValueChange() {\n    this.errorMessage = null;\n  }\n\n  initForm() {\n    if (this.barCodeMode) {\n      this.disableAddButton(false);\n    }\n    this.addOrderItemForm = this.formBuilder.group({\n      barCode: [''],\n      productName: [''],\n      productId: [''],\n      quantity: ['', Validators.min(1)]\n    });\n  }\n\n  private initBarCodeMode() {\n    this.barCodeMode = this.cookieService.check(\"barCodeMode\") ? TypeUtil.toBoolean(this.cookieService.get(\"barCodeMode\")) : true;\n  }\n\n  shouldEnableBarCodeMode(event) {\n    this.resetForm();\n    this.cookieService.set(\"barCodeMode\", String(event.currentTarget.checked));\n  }\n\n  private resetForm() {\n    this.addOrderItemForm.reset();\n    this.productStockInfo = null;\n    this.productItem = null;\n    this.changeErrorMessage(null);\n  }\n\n  getAllCustomers() {\n    this.productService.getAllProductNames().subscribe(\n      data => {\n        for (let idAndNameProduct of data) {\n          this.productIdMapByName.set(idAndNameProduct.second, idAndNameProduct.first)\n          this.productNames.push(idAndNameProduct.second);\n        }\n      }\n    )\n  }\n\n  onBlurProductName() {\n    this.productItem = null;\n    let productName = this.addOrderItemForm.get(\"productName\").value;\n    if (productName != null) {\n      let productId = this.productIdMapByName.get(productName);\n      if (productId != null) {\n        this.productService.getProductStockInfo(productId).subscribe(\n          data => {\n            this.productStockInfo = ProductStockInfo.fromJson(data);\n          },\n          error => {\n            this.changeErrorMessage(error.error);\n            this.productStockInfo = null;\n          }\n        )\n      }\n    } \n  }\n\n  onBlurBarCode() {\n    this.productStockInfo = null;\n    let barCode = this.addOrderItemForm.get(\"barCode\").value;\n    if (barCode != null) {\n      this.productService.getProductItemByBarCode(barCode).subscribe(\n        data => {\n          this.productItem = ProductItem.fromJson(data);\n          this.disableAddButton(false);\n        },\n        error => {\n          this.changeErrorMessage(error.error);\n          this.productItem = null;\n        }\n      )\n    }\n  }\n\n  onSubmit() {\n    if (this.barCodeMode) {\n      this.onSubmitBarCodeMode();\n    } else {\n      this.onSubmitNoBarCodeMode();\n    }\n  }\n  \n  private onSubmitBarCodeMode() {\n    let barCode = this.addOrderItemForm.get(\"barCode\").value;\n    if (barCode == null || barCode.length == 0) {\n      this.changeErrorMessage(\"Please enter a barcode.\")\n    } else {\n      this.addInProgress(true);\n      let request = new AddOrderItemByBarCodeReq(this.orderId, barCode);\n      this.orderService.addOrderItemByBarCode(request).subscribe(\n        data => {\n          console.log(data);\n          this.modal.close(true);\n        },\n        error => {\n          this.changeErrorMessage(error.error);\n          this.addInProgress(false);\n        });\n      this.errorMessage = null;\n    }\n  }\n\n  private onSubmitNoBarCodeMode() {\n    let productName = this.addOrderItemForm.get(\"productName\").value;\n    let productId = this.productIdMapByName.get(productName);\n    const qty = this.addOrderItemForm.get(\"quantity\").value;\n    if (this.productStockInfo === null) {\n      this.changeErrorMessage('Please select a product from the auto-complete list.');\n    } else if (! this.isValidQuantity(qty)) {\n      this.changeErrorMessage('Please choose a quantity between 1 to ' + this.productStockInfo.getFreeQuantity());\n    } else {\n      this.addInProgress(true);\n      let request = new AddOrderItemReq(this.orderId, productId, qty);\n      this.orderService.addOrderItem(request).subscribe(\n        data => {\n          console.log(data);\n          this.modal.close(true);\n        },\n        error => {\n          this.changeErrorMessage(error.error);\n          this.addInProgress(false);\n        });\n      this.errorMessage = null;\n    }\n  }\n\n  private addInProgress(isInProgress: boolean) {\n    this.addOrderItemInProgress = isInProgress;\n  }\n\n  private changeErrorMessage(errorMessage: string) {\n    this._error.next(errorMessage);\n  }\n\n  private isValidQuantity(qty: number): boolean {\n    return qty > 0 && qty <= this.productStockInfo.getFreeQuantity();\n  }\n\n  private disableAddButton(disabled: boolean) {\n    this.isAddButtonDisabled = disabled;\n  }\n  \n\n  onClose() {\n    this.modal.close(false)\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL2NvbmZpcm0tbW9kYWwvY29uZmlybS1tb2RhbC1jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">{{ title }}</h4>\\n    <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"onClickClose()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <p>{{ message }}</p>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"onClickClose()\\\">No</button>\\n  <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onClickYes()\\\">Yes</button>\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'confirm-modal',\n  templateUrl: './confirm-modal-component.html',\n  styleUrls: ['./confirm-modal-component.css']\n})\nexport class ConfirmModalComponent implements OnInit {\n\n  @Input() title: string\n  @Input() message: string\n\n  constructor(public modal: NgbActiveModal) { }\n\n  ngOnInit() {\n  }\n\n  onClickYes() {\n    this.modal.close(true)\n  }\n\n  onClickClose() {\n    this.modal.close(false)\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL2NyZWF0ZS1vcmRlci1tb2RhbC9jcmVhdGUtb3JkZXItbW9kYWwuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">New Order</h4>\\n  <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"onClose()\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<form [formGroup]=\\\"createOrderForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  <div class=\\\"modal-body\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"Name\\\">Name</label>\\n        <input type=\\\"text\\\" formControlName=\\\"name\\\"\\n          (input)=\\\"settingChanged()\\\"\\n          class=\\\"form-control\\\"/>\\n          <label *ngIf=\\\"isFormSubmitted && createOrderForm.get('name').invalid\\\" class=\\\"text-danger\\\">A name is required.</label>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"comment\\\">Comment/Description</label>\\n        <input type=\\\"text\\\" formControlName=\\\"comment\\\"\\n          (input)=\\\"settingChanged()\\\"\\n          class=\\\"form-control\\\"/>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"customer\\\">Customer</label>\\n        <select type=\\\"text\\\" formControlName=\\\"customers\\\"\\n          (input)=\\\"settingChanged()\\\"\\n          class=\\\"form-control\\\">\\n          <option *ngFor=\\\"let customer of customersArray\\\"\\n          [ngValue]=\\\"customer\\\">{{customer.id}} | {{ customer.store.name }} | {{ customer.store.owner.firstName }} {{ customer.store.owner.lastName }}</option>\\n        </select>\\n        <label *ngIf=\\\"isFormSubmitted && createOrderForm.get('customers').invalid\\\" class=\\\"text-danger\\\">A customer is required.</label>\\n      </div>\\n      <div>\\n          <ngb-alert *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\" [dismissible]=\\\"false\\\" (close)=\\\"errorMessage = null\\\">{{ errorMessage }}</ngb-alert>\\n      </div>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button type=\\\"submit\\\" class=\\\"btn btn-outline-dark\\\">Create</button>\\n  </div>\\n</form>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { Customer } from 'src/app/model/Customer';\nimport { CustomerService } from 'src/app/service/customer-service';\nimport { Order } from 'src/app/model/Order';\nimport { OrderService } from 'src/app/service/order-service';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-create-order-modal',\n  templateUrl: './create-order-modal.component.html',\n  styleUrls: ['./create-order-modal.component.css']\n})\nexport class CreateOrderModalComponent implements OnInit {\n\n  createOrderForm: FormGroup\n  customersArray: Customer[] = []\n  isFormSubmitted: boolean = false\n  errorMessage: string\n  private _error = new Subject<string>()\n\n  constructor(private modal: NgbActiveModal,\n              private customerService: CustomerService,\n              private orderService: OrderService,\n              private router: Router,\n              private formBuilder: FormBuilder) { }\n\n  ngOnInit() {\n    this.createOrderForm = this.formBuilder.group({\n      name: ['', [Validators.required]],\n      customers: [[], [Validators.required]],\n      comment: ['']\n    });\n\n    this.customerService.getAllCustomers().subscribe(data => {\n      console.log(data)\n      for (let i = 0; i < data.length; i++) {\n        this.customersArray.push(Customer.fromJson(data[i]))\n      }\n      this.createOrderForm.setValue({\n        name: '',\n        comment: '',\n        customers: this.customersArray\n      })\n    })\n\n    this._error.subscribe((msg) => this.errorMessage = msg)\n    this._error.pipe(debounceTime(5000)).subscribe(() => this.errorMessage = null)\n  }\n\n  public changeErrorMessage(errorMessage: string) {\n    this._error.next(\"Order not created : \" + errorMessage)\n  }\n\n  settingChanged() {\n\n  }\n\n  onSubmit() {\n    this.isFormSubmitted = true\n    const customer = this.createOrderForm.get(\"customers\").value\n    const orderName = this.createOrderForm.get(\"name\").value\n    const comment = this.createOrderForm.get(\"comment\").value\n    const order = new Order()\n    order.name = orderName\n    order.comment = comment\n    order.customer = customer\n    this.orderService.addOrder(order).subscribe(\n      data => {\n        this.modal.close(true)\n        this.router.navigate(['/order', data.id])\n      },\n      error => {\n        this.changeErrorMessage(error.error);\n      })\n  }\n\n  onClose() {\n    this.modal.close(false)\n  }\n\n}\n","module.exports = \".my-custom-scrollbar {\\n    position: relative;\\n    max-height: 500px;\\n    overflow: auto;\\n}\\n\\n.table-wrapper-scroll-y {\\n    display: block;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kYWwvZGVsZXRlLW9yZGVyLWl0ZW1zLW1vZGFsL2RlbGV0ZS1vcmRlci1pdGVtcy1tb2RhbC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksY0FBYztBQUNsQiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL2RlbGV0ZS1vcmRlci1pdGVtcy1tb2RhbC9kZWxldGUtb3JkZXItaXRlbXMtbW9kYWwuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5teS1jdXN0b20tc2Nyb2xsYmFyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgbWF4LWhlaWdodDogNTAwcHg7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi50YWJsZS13cmFwcGVyLXNjcm9sbC15IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbn0iXX0= */\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">{{ title }}</h4>\\n  <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"onClickClose()\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <div class=\\\"table-wrapper-scroll-y my-custom-scrollbar\\\">\\n    <table class=\\\"table table-striped\\\">\\n      <thead>\\n        <tr>\\n          <th>#</th>\\n          <th>Id</th>\\n          <th>Product Name</th>\\n          <th>BarCode</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let item of orderItems; let i = index\\\">\\n          <td>{{ i+1 }}</td>\\n          <td>{{ item.productItem.id }}</td>\\n          <td>{{ item.productItem.product.name }}</td>\\n          <td>{{ item.productItem.barCode }}</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n<button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"onClickClose()\\\">No</button>\\n<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onClickYes()\\\">Yes</button>\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { OrderItem } from 'src/app/model/OrderItem';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-delete-order-items-modal',\n  templateUrl: './delete-order-items-modal.component.html',\n  styleUrls: ['./delete-order-items-modal.component.css']\n})\nexport class DeleteOrderItemsModalComponent implements OnInit {\n\n  @Input() title: string\n  @Input() orderItems: OrderItem[]\n\n  constructor(public modal: NgbActiveModal) { }\n\n  ngOnInit() {\n  }\n\n  onClickYes() {\n    this.modal.close(true);\n  }\n\n  onClickClose() {\n    this.modal.close(false);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL2luZm8tbW9kYWwvaW5mby1tb2RhbC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h4 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">{{ title }}</h4>\\n  <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"onClickClose()\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <p>{{ message }}</p>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"onClickClose()\\\">OK</button>\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-info-modal',\n  templateUrl: './info-modal.component.html',\n  styleUrls: ['./info-modal.component.css']\n})\nexport class InfoModalComponent implements OnInit {\n\n  @Input() title: string\n  @Input() message: string\n\n  constructor(public modal: NgbActiveModal) { }\n\n  ngOnInit() {\n  }\n\n  onClickClose() {\n    this.modal.close(false)\n  }\n}\n","module.exports = \".ng-invalid:not(form)  {\\n    border-left: 5px solid #a94442; /* red */\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbW9kYWwvb3JkZXItbm90aWZpY2F0aW9uLW1vZGFsL29yZGVyLW5vdGlmaWNhdGlvbi1tb2RhbC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksOEJBQThCLEVBQUUsUUFBUTtBQUM1QyIsImZpbGUiOiJzcmMvYXBwL21vZGFsL29yZGVyLW5vdGlmaWNhdGlvbi1tb2RhbC9vcmRlci1ub3RpZmljYXRpb24tbW9kYWwuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5uZy1pbnZhbGlkOm5vdChmb3JtKSAge1xuICAgIGJvcmRlci1sZWZ0OiA1cHggc29saWQgI2E5NDQ0MjsgLyogcmVkICovXG59Il19 */\"","module.exports = \"<div>\\n  <div class=\\\"modal-header\\\">\\n    <h3 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">Order Notification Setting</h3>\\n    <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"onClose()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\">\\n    <form [formGroup]=\\\"form\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"notifType\\\">Notification Type</label>\\n        <select formControlName=\\\"notificationTypesSelect\\\" class=\\\"custom-select\\\">\\n            <option *ngFor=\\\"let type of notificationTypes\\\" [ngValue]=\\\"type\\\">{{ type }}</option>\\n        </select>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"dateDocument\\\">Document's Date</label>\\n        <div class=\\\"input-group\\\">\\n          <input formControlName=\\\"dateDocument\\\" class=\\\"form-control\\\" placeholder=\\\"yyyy-mm-dd\\\" name=\\\"dp\\\" ngbDatepicker #dp=\\\"ngbDatepicker\\\">\\n          <div class=\\\"input-group-append\\\">\\n            <button class=\\\"btn btn-outline-secondary calendar\\\" (click)=\\\"dp.toggle()\\\" type=\\\"button\\\"></button>\\n          </div>\\n        </div>\\n      </div>\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary btn-sm\\\" (click)=\\\"addEmailInput()\\\" style=\\\"float:right\\\">\\n        <span class=\\\"glyphicon glyphicon-plus\\\"></span>+\\n      </button>\\n      <div formArrayName=\\\"emailInputs\\\" *ngFor=\\\"let input of form.get('emailInputs').controls; let i = index;\\\">\\n        <div [formGroupName]=\\\"i\\\">\\n          <label for=\\\"email\\\">Email {{ i + 1}} </label>\\n          <input formControlName=\\\"email\\\" class=\\\"form-control\\\" style=\\\"margin-bottom: 6px\\\">\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button type=\\\"button\\\" class=\\\"btn btn-outline-dark\\\" (click)=\\\"onSubmit()\\\" [disabled]=\\\"! form.valid\\\">Save</button>\\n  </div>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { FormGroup, FormBuilder, Validators, FormControl, FormArray } from '@angular/forms';\nimport { NotificationService } from 'src/app/service/notification-service';\nimport { OrderNotificationRequest } from 'src/app/model/request/notification/OrderNotificationRequest';\nimport { JsonPipe } from '@angular/common';\n\n@Component({\n  selector: 'app-order-notification-modal',\n  templateUrl: './order-notification-modal.component.html',\n  styleUrls: ['./order-notification-modal.component.css']\n})\nexport class OrderNotificationModalComponent implements OnInit {\n\n  @Input() orderId: number\n  form: FormGroup\n  emailInputs: FormArray;\n  notificationTypes: string[] = []\n\n  constructor(private modal: NgbActiveModal,\n              private formBuilder: FormBuilder,\n              private notificationService: NotificationService) { }\n\n  ngOnInit() {\n    this.initNotificationTypes();\n    this.form = this.formBuilder.group({\n      notificationTypesSelect: [this.notificationTypes, Validators.required],\n      dateDocument: [],\n      emailInputs: this.formBuilder.array([this.createEmailInput])\n    });\n  }\n\n  private initNotificationTypes() {\n    this.notificationService.getNotificationTypes().subscribe(\n      data => {\n        for (let type of data) {\n          this.notificationTypes.push(type);\n        }\n      },\n      error => {\n        console.log(\"Error : Cannot get the notification types : \" + error);  \n      }\n    )\n  }\n\n  private createEmailInput(): FormGroup {\n    return this.formBuilder.group({\n      email: ['', Validators.email]\n    });\n  }\n\n  addEmailInput() {\n    this.emailInputs = this.form.get('emailInputs') as FormArray;\n    this.emailInputs.push(this.createEmailInput());\n  }\n\n  onSubmit() {\n    if (this.form.valid) {\n      let dp = this.form.controls.dateDocument.value;\n      let dateDocument = new Date(dp.year, dp.month - 1, dp.day);\n      let types: string[] = [];\n      types.push(this.form.controls.notificationTypesSelect.value);\n      let req = new OrderNotificationRequest(types, this.orderId);\n      req.dateDocument = dateDocument.getTime();\n      this.notificationService.notifyOrder(req).subscribe(\n        data => {\n          console.log(\"Notify done : \" + data)\n          this.modal.close();\n        }\n      )\n    }\n  }\n\n  onClose() {\n    this.modal.close(false);\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZGFsL3Nob3ctb3JkZXItaXRlbXMtbW9kYWwvc2hvdy1vcmRlci1pdGVtcy1tb2RhbC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"modal-header\\\">\\n  <h5 class=\\\"modal-title\\\" id=\\\"modal-basic-title\\\">Order Items</h5>\\n  <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"onClose()\\\">\\n    <span aria-hidden=\\\"true\\\">&times;</span>\\n  </button>\\n</div>\\n<div class=\\\"modal-body\\\">\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n      <tr>\\n        <th>#</th>\\n        <th>Id</th>\\n        <th>Name</th>\\n        <th>Price</th>\\n        <th>Creation Date</th>\\n        <th>Last Modified Date</th>\\n        <th>BarCode</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let item of orderItems; let i = index\\\">\\n        <td>{{ i+1 }}</td>\\n        <td>{{ item.productItem.id }}</td>\\n        <td>{{ item.productItem.product.name }}</td>\\n        <td>{{ item.productItem.product.price }} €</td>\\n        <td>{{ item.createdDatetime }}</td>\\n        <td>{{ item.lastModifiedDatetime }}</td>\\n        <td>{{ item.productItem.barCode }}</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n  <button class=\\\"btn btn-outline-dark\\\" (click)=\\\"onClose()\\\">Close</button>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { OrderItem } from 'src/app/model/OrderItem';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-show-order-items-modal',\n  templateUrl: './show-order-items-modal.component.html',\n  styleUrls: ['./show-order-items-modal.component.css']\n})\nexport class ShowOrderItemsModalComponent implements OnInit {\n\n  @Input() orderItems: OrderItem[];\n\n  constructor(private modal: NgbActiveModal) { }\n\n  ngOnInit() {\n  }\n\n  onClose() {\n    this.modal.close(false)\n  }\n}\n","import { AggregatedOrderInfo } from './AggregatedOrderInfo';\nimport { AggregatedOrderItem } from './AggregatedOrderItem';\nimport { Customer } from './Customer';\n\nexport class AggregatedOrder {\n    id: number;\n    name: string;\n    comment: string;\n    customer: Customer;\n    status: string;\n    createdDatetime: Date;\n    lastModifiedDatetime: Date;\n    closeDatetime: Date;\n    aggregatedOrderInfo: AggregatedOrderInfo;\n    aggregatedOrderItems: AggregatedOrderItem[] = [];\n\n    constructor() {}\n\n    static fromJson(data: any): AggregatedOrder {\n        let order = new AggregatedOrder();\n        order.id = data.id;\n        order.name = data.name;\n        order.customer = Customer.fromJson(data.customer);\n        order.status = data.status;\n        order.comment = data.comment;\n        order.createdDatetime = data.createdDatetime;\n        order.lastModifiedDatetime = data.lastModifiedDatetime;\n        order.closeDatetime = data.closeDatetime;\n        order.aggregatedOrderInfo = AggregatedOrderInfo.fromJson(data.aggregatedOrderInfo);\n        for (let item of data.aggregatedOrderItems) {\n            order.aggregatedOrderItems.push(AggregatedOrderItem.fromJson(item));\n        }\n        return order;\n    }\n}","export class AggregatedOrderInfo {\n    \n    orderItemSize: number;\n    productSize: number;\n    totalPrice: number;\n\n    constructor() {}\n\n    static fromJson(data: any) : AggregatedOrderInfo {\n        let order = new AggregatedOrderInfo();\n        order.orderItemSize = data.orderItemSize;\n        order.productSize = data.productSize;\n        order.totalPrice = data.totalPrice;\n        return order;\n    }\n}","import { Product } from './Product';\nimport { OrderItem } from './OrderItem';\n\nexport class AggregatedOrderItem {\n    quantity: number;\n    ttlPrice: number;\n    lastModifiedDatetime: Date;\n    product: Product;\n    orderItems: OrderItem[] = [];\n\n    constructor() {}\n\n    static fromJson(data: any): AggregatedOrderItem {\n        let orderItem = new AggregatedOrderItem();\n        orderItem.quantity = data.quantity;\n        orderItem.ttlPrice = data.ttlPrice;\n        orderItem.lastModifiedDatetime = data.lastModifiedDatetime;\n        orderItem.product = Product.fromJson(data.product);\n        for (let item of data.orderItems) {\n            orderItem.orderItems.push(OrderItem.fromJson(item));\n        }\n        return orderItem;\n    }\n}","import { Store } from './Store';\n\nexport class Customer {\n\n    id: number\n    store: Store = new Store()\n\n    constructor() {}\n\n    static fromJson(data: any) : Customer {\n        let customer = new Customer()\n        customer.id = data.id\n        customer.store = Store.fromJson(data.store)\n        return customer\n    }\n}","import { OrderItem } from './OrderItem'\nimport { Customer } from './Customer';\n\nexport class Order {\n    \n    id: number\n    name: string\n    comment: string\n    status: string\n    customer: Customer = new Customer()\n    createDatetime: Date\n    closeDatetime: Date\n    items: Map<number, OrderItem> = new Map()\n    nbProduct: number\n    totalItemQty: number\n    totalPrice: number\n\n    constructor() {\n    }\n\n    static fromJson(data: any) : Order {\n        let itemsQty = data.items.reduce((sum, item) => sum + item.quantity, 0);\n        let totalPrice = this.getTotalPrice(data.items)\n        let sr = new Order()\n        sr.id = data.id\n        sr.name = data.name\n        sr.customer = data.customer\n        sr.status = data.status,\n        sr.nbProduct = data.items.length\n        sr.createDatetime = data.createdDateTime\n        sr.closeDatetime = data.closeDateTime\n        sr.comment = data.comment\n        sr.totalItemQty = itemsQty\n        sr.totalPrice = totalPrice\n        return sr\n    }\n\n    private static getTotalPrice(items: any) {\n        let total = 0\n        for (let i = 0; i < items.length; i++) {\n            total += items[i].productItem.product.price * items[i].quantity;\n        }\n        return total\n    }\n}","import { ProductItem } from './ProductItem';\n\nenum Type {\n    GLASSES = \"GLASSES\",\n}\n\nexport class OrderItem {\n\n    id: number\n    productItem: ProductItem\n    type: Type = Type.GLASSES\n    createdDatetime: Date\n    lastModifiedDatetime: Date\n    \n    constructor() {}\n\n    static fromJson(data: any): OrderItem {\n        let orderItem = new OrderItem();\n        orderItem.id = data.id;\n        orderItem.productItem = ProductItem.fromJson(data.productItem);\n        orderItem.createdDatetime = data.createdDatetime;\n        orderItem.lastModifiedDatetime = data.lastModifiedDatetime;\n        return orderItem;\n    }\n}","export class Owner {\n    id: number\n    compagnyName: string\n    firstName: string\n    lastName: string\n    email: string\n    address: string\n\n    constructor() {\n    }\n\n    static fromJson(data: any) : Owner {\n        let owner = new Owner();\n        owner.id = data.id;\n        owner.compagnyName = data.compagnyName;\n        owner.firstName = data.firstName;\n        owner.lastName = data.lastName;\n        owner.email = data.email;\n        owner.address = data.address;\n        return owner;\n    }\n}","export class Product {\n    id: number\n    name: string\n    price: number\n\n    constructor(id: number, name: string, price: number) {\n        this.id = id\n        this.name = name\n        this.price = price\n    }\n\n    static fromJson(data: any): Product {\n        const productId = data.id;\n        const productName = data.name;\n        const productPrice = data.price;\n        return new Product(productId, productName, productPrice)\n    }\n}","import { Product } from './Product';\n\nexport class ProductItem {\n\n    id: number\n    product: Product\n    barCode: string\n    orderItemId : boolean\n    createdDatetime: Date\n    lastModifiedDatetime: Date\n\n    constructor() {}\n\n    static fromJson(data: any): ProductItem {\n        let productItem = new ProductItem();\n        productItem.id = data.id;\n        productItem.orderItemId = data.orderItemIdOpt;\n        productItem.product = Product.fromJson(data.product);\n        productItem.createdDatetime = data.createdDatetime;\n        productItem.lastModifiedDatetime = data.lastModifiedDatetime;\n        if (data.barCode != undefined) {\n            productItem.barCode = data.barCode.id;\n        }\n        return productItem;\n    }\n\n}","import { Product } from './Product';\n\nexport class ProductStockInfo {\n    product: Product\n    createdQuantity: number;\n    usedQuantity: number;\n\n    constructor() {}\n\n    static fromJson(data: any): ProductStockInfo {\n        let stockInfo = new ProductStockInfo();\n        stockInfo.product = Product.fromJson(data.product);\n        stockInfo.createdQuantity = data.quantityCreated;\n        stockInfo.usedQuantity = data.quantityUsed;\n        return stockInfo;\n    }\n\n    getFreeQuantity(): number {\n        return this.createdQuantity - this.usedQuantity;\n    }\n}","import { Owner } from './Owner';\n\nexport class Store {\n\n    id: number\n    name: string\n    email: string\n    address: string\n    phone: string\n    owner: Owner\n\n    constructor() {\n    }\n\n    static fromJson(data: any): Store {\n        let store = new Store();\n        store.id = data.id;\n        store.name = data.name;\n        store.address = data.address;\n        store.email = data.email;\n        store.phone = data.phone;\n        store.owner = Owner.fromJson(data.owner);\n        return store\n    }\n}","export class AdminSetting {\n\n    emails: string[]\n    ordersNbToShow: number\n    notifyOnCloseReport: boolean\n\n    constructor() {}\n}","export class AddCustomerReq {\n\n    ownerId: number\n    ownerCompagnyName: string\n    ownerFirstName: number\n    ownerLastName: number\n    ownerEmail: string\n    storeName: string\n    storeAddress: string\n    storePhone: string\n    storeEmail: string\n\n    constructor(ownerId: number, storeName: string) {\n        this.ownerId = ownerId;\n        this.storeName = storeName;\n    }\n}","export class NotificationRequest {\n\n    types: string[]\n\n    constructor(types: string[]) {\n        this.types = types;\n    }\n}","import { NotificationRequest } from './NotificationRequest';\n\nexport class OrderNotificationRequest extends NotificationRequest {\n\n    orderId: number\n    dateDocument: number = new Date().getTime();\n\n    constructor(types: string[], orderId: number) {\n        super(types);\n        this.orderId = orderId;\n    }\n}","export class AddOrderItemByBarCodeReq {\n\n    orderId: number\n    barCode: string\n\n    constructor(orderId: number, barCode: string) {\n        this.orderId = orderId;\n        this.barCode = barCode;\n    }\n}","export class AddOrderItemReq {\n\n    orderId: number;\n    requestedQty: number;\n    productId: number;\n\n    constructor(orderId: number, productId: number, requestedQty: number) {\n        this.orderId = orderId;\n        this.productId = productId;\n        this.requestedQty = requestedQty;\n    }\n}","export class DeleteOrderItemsReq {\n\n    orderId: number\n    orderItemsId: number[]\n\n    constructor(orderId: number, orderItemsId: number[]) {\n        this.orderId = orderId;\n        this.orderItemsId = orderItemsId;\n    }\n}","module.exports = \".table tr.active td {\\n    background-color:#275e94 !important;\\n    color: white;\\n    font-weight: bold;\\n    white-space: nowrap;\\n  }\\n\\n.table table-striped tr td {\\n  padding: 1.5%;\\n}\\n\\n/* Scroll Bar Aggregated Order Item table */\\n\\n.my-custom-scrollbar {\\n  position: relative;\\n  max-height: 450px;\\n  overflow: auto;\\n}\\n\\n.table-wrapper-scroll-y {\\n  display: block;\\n}\\n\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvb3JkZXItcGFuZWwvbGlzdC1vcmRlci1pdGVtL2xpc3Qtb3JkZXItaXRlbS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksbUNBQW1DO0lBQ25DLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsbUJBQW1CO0VBQ3JCOztBQUVGO0VBQ0UsYUFBYTtBQUNmOztBQUVBLDJDQUEyQzs7QUFDM0M7RUFDRSxrQkFBa0I7RUFDbEIsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvb3JkZXItcGFuZWwvbGlzdC1vcmRlci1pdGVtL2xpc3Qtb3JkZXItaXRlbS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnRhYmxlIHRyLmFjdGl2ZSB0ZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjojMjc1ZTk0ICFpbXBvcnRhbnQ7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIH1cblxuLnRhYmxlIHRhYmxlLXN0cmlwZWQgdHIgdGQge1xuICBwYWRkaW5nOiAxLjUlO1xufVxuXG4vKiBTY3JvbGwgQmFyIEFnZ3JlZ2F0ZWQgT3JkZXIgSXRlbSB0YWJsZSAqL1xuLm15LWN1c3RvbS1zY3JvbGxiYXIge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1heC1oZWlnaHQ6IDQ1MHB4O1xuICBvdmVyZmxvdzogYXV0bztcbn1cblxuLnRhYmxlLXdyYXBwZXItc2Nyb2xsLXkge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuIl19 */\"","module.exports = \"<div class=\\\"table-responsive table-wrapper-scroll-y my-custom-scrollbar\\\">\\n  <table class=\\\"table table-striped table-hover\\\">\\n    <thead>\\n      <tr>\\n        <th>#</th>\\n        <th>Name</th>\\n        <th>Price</th>\\n        <th>Qty</th>\\n        <th>Total Price</th>\\n        <th>Last Modified Date</th>\\n        <th></th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let item of orderItems | filter : 'name' : searchString; let i = index\\\"\\n      (click)=\\\"setSelectedRow(i); onClickShowSelectedOrderItems(item.orderItems)\\\"\\n        [class.active]=\\\"i == selectedRow\\\">\\n        <td>{{ i+1 }}</td>\\n        <td>{{ item.product.name }}</td>\\n        <td>{{ item.product.price }} €</td>\\n        <td\\n          contenteditable=\\\"order.status !== 'CLOSED'\\\"\\n          (blur)=\\\"onChangeOrderItemQuantity(item, $event)\\\">\\n          {{ item.quantity }}\\n        </td>\\n        <td>{{ item.ttlPrice }} €</td>\\n        <td>{{ item.lastModifiedDatetime | date:'medium' }}</td>\\n        <td>\\n          <button *ngIf=\\\"order.status !== 'CLOSED'\\\"\\n          (click)=\\\"onClickDeleteOrderItemButton(i, item.orderItems)\\\"\\n          [disabled]=\\\"deleteOrderItemInProgressArray[i]\\\"\\n          class=\\\"btn btn-danger btn-sm\\\">\\n              <span *ngIf=\\\"deleteOrderItemInProgressArray[i]\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>\\n            Delete</button>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n<br>\\n<selected-order-items-list\\n  [selectedOrderItems]=\\\"selectedOrderItems\\\"\\n  [order]=\\\"order\\\"\\n  (onDeleteOrderItemEvent)=\\\"deleteSingleOrderItem($event)\\\"\\n></selected-order-items-list>\\n\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { OrderItem } from '../../model/OrderItem'\nimport { OrderService } from 'src/app/service/order-service';\nimport { ModalBuilder } from 'src/app/common-components/modal-builder';\nimport { InfoModalComponent } from 'src/app/modal/info-modal/info-modal.component';\nimport { ProductService } from 'src/app/service/product-service';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { ModifyOrderItemReq } from 'src/app/model/request/order/ModifyOrderItemReq';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\nimport { AggregatedOrderItem } from 'src/app/model/AggregatedOrderItem';\nimport { DeleteOrderItemsModalComponent } from 'src/app/modal/delete-order-items-modal/delete-order-items-modal.component';\nimport { DeleteOrderItemsReq } from 'src/app/model/request/order/DeleteOrderItemsReq';\n\n@Component({\n  selector: 'list-order-item',\n  templateUrl: './list-order-item.component.html',\n  styleUrls: ['./list-order-item.component.css']\n})\nexport class ListOrderItemComponent implements OnInit {\n\n  inputId: number\n  inputBarCode: string\n  inputName: string\n  inputQuantity: number\n  inputPrice: number\n  selectedRow: number\n  areNewOrderItemFieldsSet = false\n  searchString: string\n  selectedOrderItems: Map<number, OrderItem> = new Map();\n  productNames: string[] = []\n  deleteOrderItemInProgressArray: boolean[] = [];\n  productIdMapByName: Map<string, number> = new Map()\n  \n  search = (text$: Observable<string>) =>\n    text$.pipe(\n      debounceTime(200),\n      distinctUntilChanged(),\n      map(term => term.length < 1 ? []\n        : this.productNames.filter(v => v.toLowerCase().indexOf(term.toLowerCase()) > -1).slice(0, 10))\n    )\n\n  @Input() orderItems: IterableIterator<AggregatedOrderItem>\n  @Input() order: AggregatedOrder\n\n  @Output() onCreateOrderItemEvent = new EventEmitter<OrderItem>()\n  @Output() onChangeOrderItemEvent = new EventEmitter<ModifyOrderItemReq>()\n  @Output() onDeleteOrderItemEvent = new EventEmitter<number[]>()\n\n  constructor(private orderService: OrderService,\n              private productService: ProductService,\n              private modalBuilder: ModalBuilder) {}\n\n  ngOnInit() {\n    this.initDeleteOrderItemButtonStatus();\n  }\n\n  private initDeleteOrderItemButtonStatus() {\n    for (let i = 0; i < this.deleteOrderItemInProgressArray.length; i++) {\n      this.deleteOrderItemInProgressArray.push(false);\n    }\n  }\n\n  checkInputFieldSet() {\n    this.areNewOrderItemFieldsSet = this.inputName.trim().length > 0\n                                      && this.inputQuantity > 0\n                                      && this.inputPrice > 0\n  }\n\n  deleteSingleOrderItem(orderItem: OrderItem) {\n    const orderItems: OrderItem[] = [orderItem];\n    this.deleteOrderItem(orderItems);\n    this.selectedOrderItems.delete(orderItem.id);\n  }\n\n  deleteOrderItem(orderItems: OrderItem[]) {\n    const ids = orderItems.map(item => item.id);\n    const req = new DeleteOrderItemsReq(this.order.id, ids);\n    this.orderService.deleteOrderItems(req).subscribe(\n      data => {\n          this.onDeleteOrderItemEvent.emit(ids);\n          this.deleteFromSelectedOrderItem(ids);\n      },\n      error => {\n        const modalRef = this.modalBuilder.open(InfoModalComponent)\n        modalRef.componentInstance.title = \"Error : Failed to delete the order items.\";\n        modalRef.componentInstance.message = error.error\n      }\n    )\n  }\n\n  private deleteFromSelectedOrderItem(ids: number[]) {\n    for(let id of ids) {\n      this.selectedOrderItems.delete(id);\n    }\n  }\n\n  onClickDeleteOrderItemButton(rowTableIndex: number, orderItems: OrderItem[]) {\n    this.setDeleteOrderItemButtonStatus(rowTableIndex, true);\n    this.displayDeletionConfirmationModal(rowTableIndex, orderItems);\n  }\n\n  displayDeletionConfirmationModal(rowTableIndex:number, orderItems: OrderItem[]) {\n    const modalRef = this.modalBuilder.openCenteredLargeModal(DeleteOrderItemsModalComponent)\n    modalRef.componentInstance.title = \"Are you sure you want to delete the following order items ?\"\n    modalRef.componentInstance.orderItems = orderItems;\n    modalRef.result.then((response) => {\n      if (response) {\n        this.deleteOrderItem(orderItems);\n      }\n      this.setDeleteOrderItemButtonStatus(rowTableIndex, false);\n    })\n  }\n\n  onChangeOrderItemQuantity(orderItem: OrderItem, event: any) {\n    /*let newQuantity = event.target.textContent\n    if (orderItem.quantity != newQuantity) {\n      let req = new ModifyOrderItemReq(orderItem.id, newQuantity);\n      // Must send Http request.\n      this.onChangeOrderItemEvent.emit(req)\n    } */\n  }\n\n  setSelectedRow(index: number) {\n    this.selectedRow = index\n  }\n\n  onClickShowSelectedOrderItems(selectedOrderItems: OrderItem[]) {\n    let tmp = new Map<number, OrderItem>();\n    for (let orderItem of selectedOrderItems) {\n      tmp.set(orderItem.id, orderItem);\n    }\n    this.selectedOrderItems = tmp;\n  }\n\n  setDeleteOrderItemButtonStatus(index: number, isInProgress: boolean) {\n      this.deleteOrderItemInProgressArray[index] = isInProgress;\n  }\n}\n","module.exports = \"/* Scroll Bar Aggregated Order Item table */\\n.my-custom-scrollbar {\\n    position: relative;\\n    max-height: 200px;\\n    overflow: auto;\\n  }\\n.table-wrapper-scroll-y {\\n    display: block;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvb3JkZXItcGFuZWwvc2VsZWN0ZWQtb3JkZXItaXRlbXMtbGlzdC9zZWxlY3RlZC1vcmRlci1pdGVtcy1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTJDO0FBQzNDO0lBQ0ksa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixjQUFjO0VBQ2hCO0FBRUE7SUFDRSxjQUFjO0VBQ2hCIiwiZmlsZSI6InNyYy9hcHAvb3JkZXItcGFuZWwvc2VsZWN0ZWQtb3JkZXItaXRlbXMtbGlzdC9zZWxlY3RlZC1vcmRlci1pdGVtcy1saXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBTY3JvbGwgQmFyIEFnZ3JlZ2F0ZWQgT3JkZXIgSXRlbSB0YWJsZSAqL1xuLm15LWN1c3RvbS1zY3JvbGxiYXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXgtaGVpZ2h0OiAyMDBweDtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxuICBcbiAgLnRhYmxlLXdyYXBwZXItc2Nyb2xsLXkge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG4gICJdfQ== */\"","module.exports = \"<div class=\\\"table-responsive table-wrapper-scroll-y my-custom-scrollbar\\\">\\n  <table class=\\\"table table-striped table-hover table-sm\\\">\\n    <thead>\\n      <tr>\\n        <th>#</th>\\n        <th>Id</th>\\n        <th>BarCode</th>\\n        <th>Created Date</th>\\n        <th>Last Modified Date</th>\\n        <th></th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let item of selectedOrderItems.values(); let i = index\\\">\\n        <td>{{ i+1 }}</td>\\n        <td>{{ item.productItem.id }}</td>\\n        <td>{{ item.productItem.barCode }}</td>\\n        <td>{{ item.createdDatetime }}</td>\\n        <td>{{ item.lastModifiedDatetime }}</td>\\n        <td>\\n          <button\\n          (click)=\\\"onClickDeleteOrderItemButton(i, item)\\\"\\n          [disabled]=\\\"deleteOrderItemInProgressArray[i]\\\"\\n          class=\\\"btn btn-danger btn-sm\\\">\\n          <span *ngIf=\\\"deleteOrderItemInProgressArray[i]\\\" class=\\\"spinner-border spinner-border-sm\\\" role=\\\"status\\\" aria-hidden=\\\"true\\\"></span>\\n            Delete</button>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { OrderItem } from 'src/app/model/OrderItem';\nimport { DeleteOrderItemsModalComponent } from 'src/app/modal/delete-order-items-modal/delete-order-items-modal.component';\nimport { ModalBuilder } from 'src/app/common-components/modal-builder';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\nimport { DeleteOrderItemsReq } from 'src/app/model/request/order/DeleteOrderItemsReq';\nimport { OrderService } from 'src/app/service/order-service';\nimport { InfoModalComponent } from 'src/app/modal/info-modal/info-modal.component';\n\n@Component({\n  selector: 'selected-order-items-list',\n  templateUrl: './selected-order-items-list.component.html',\n  styleUrls: ['./selected-order-items-list.component.css']\n})\nexport class SelectedOrderItemsListComponent implements OnInit {\n\n  @Input() selectedOrderItems: Map<number, OrderItem> = new Map();\n  @Input() order: AggregatedOrder;\n\n  @Output() onDeleteOrderItemEvent = new EventEmitter<OrderItem>();\n  deleteOrderItemInProgressArray: boolean[] = [];\n\n  constructor(private modalBuilder: ModalBuilder,\n              private orderService: OrderService) { }\n\n  ngOnInit() {\n    this.initDeleteOrderItemButtonStatus();\n  }\n\n  private initDeleteOrderItemButtonStatus() {\n    for (let i = 0; i < this.deleteOrderItemInProgressArray.length; i++) {\n      this.deleteOrderItemInProgressArray.push(false);\n    }\n  }\n\n  onClickDeleteOrderItemButton(rowTableIndex: number, orderItem: OrderItem) {\n    this.setDeleteOrderItemButtonStatus(rowTableIndex, true);\n    this.displayDeletionConfirmationModal(rowTableIndex, orderItem);\n  }\n\n  displayDeletionConfirmationModal(rowTableIndex:number, orderItem: OrderItem) {\n    const modalRef = this.modalBuilder.openCenteredLargeModal(DeleteOrderItemsModalComponent)\n    modalRef.componentInstance.title = \"Are you sure you want to delete the following order item ?\";\n    let orderItemToDelete = [];\n    orderItemToDelete.push(orderItem);\n    modalRef.componentInstance.orderItems = orderItemToDelete;\n    modalRef.result.then((response) => {\n      if (response) {\n        this.onDeleteOrderItemEvent.emit(orderItem);\n        //this.deleteOrderItem(orderItem);\n      }\n      this.setDeleteOrderItemButtonStatus(rowTableIndex, false);\n    })\n  }\n\n  deleteOrderItem(orderItem: OrderItem) {\n    const id: number[] = [orderItem.id];\n    const req = new DeleteOrderItemsReq(this.order.id, id);\n    this.orderService.deleteOrderItems(req).subscribe(\n      data => {\n          this.selectedOrderItems.delete(orderItem.id);\n      },\n      error => {\n        const modalRef = this.modalBuilder.open(InfoModalComponent)\n        modalRef.componentInstance.title = \"Error : Failed to delete the order items.\";\n        modalRef.componentInstance.message = error.error\n      }\n    )\n  }\n\n  setDeleteOrderItemButtonStatus(index: number, isInProgress: boolean) {\n    this.deleteOrderItemInProgressArray[index] = isInProgress;\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVyLXBhbmVsL3Nob3ctb3JkZXItaGVhZGVyL3Nob3ctb3JkZXItaGVhZGVyLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"container-fluid\\\" style=\\\"border-bottom: 1px solid black\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <h5>{{ order.name }}</h5>\\n    </div>\\n    <div class=\\\"col\\\">\\n      <p>Comment : {{ order.comment }}</p>\\n    </div>\\n    <div class=\\\"col\\\">\\n      <div style=\\\"overflow: hidden;\\\">\\n        <p style=\\\"float: left\\\">Customer : &nbsp;</p>\\n        <p style=\\\"float: left; font-weight: bold\\\"> {{ order.storeName }}</p>\\n      </div>\\n    </div>\\n    <div class=\\\"col\\\">\\n      <div style=\\\"overflow: hidden;\\\">\\n        <p style=\\\"float: left;\\\">Status :&nbsp;</p>\\n        <p style=\\\"float: left; font-weight: bold\\\"> {{ order.status }}</p>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <div class=\\\"row justify-content-between\\\">\\n          <div class=\\\"col-4\\\">\\n              <button\\n                class=\\\"btn btn-outline-primary\\\"\\n                (click)=\\\"onClickAddOrderItem()\\\"\\n                [disabled]=\\\"order.status === 'CLOSED'\\\"\\n              >Add Order Item</button>\\n          </div>\\n          <div class=\\\"col-4\\\">\\n              <button\\n                style=\\\"float: right\\\"\\n                class=\\\"btn btn-outline-info\\\"\\n                (click)=\\\"onClickCloseOrder()\\\"\\n                [disabled]=\\\"order.status === 'CLOSED'\\\"\\n              >Close the order</button>\\n          </div>\\n      </div>\\n    </div>\\n  </div>    \\n  <br>\\n</div>\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { ModalBuilder } from 'src/app/common-components/modal-builder';\nimport { ConfirmModalComponent } from 'src/app/modal/confirm-modal/confirm-modal-component';\nimport { OrderService } from 'src/app/service/order-service';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\nimport { AddOrderItemModalComponent } from 'src/app/modal/add-order-item-modal/add-order-item-modal.component';\n\n@Component({\n  selector: 'show-order-header',\n  templateUrl: './show-order-header.component.html',\n  styleUrls: ['./show-order-header.component.css']\n})\nexport class OrderHeaderComponent implements OnInit {\n\n  @Input() order: AggregatedOrder\n\n  @Output() onCloseOrderEvent = new EventEmitter()\n  @Output() onAddOrderItemEvent = new EventEmitter()\n\n  constructor(private modalBuilder: ModalBuilder,\n              private orderService: OrderService) { }\n\n  ngOnInit() {\n  }\n\n  onClickAddOrderItem() {\n    let modalRef = this.modalBuilder.openCenteredLargeModal(AddOrderItemModalComponent);\n    modalRef.componentInstance.orderId = this.order.id;\n    modalRef.result.then((response)=> {\n      if (response) {\n        this.onAddOrderItemEvent.emit();\n      }\n\n    })\n  }\n\n  onClickCloseOrder() {\n    let modalRef = this.modalBuilder.open(ConfirmModalComponent);\n    modalRef.componentInstance.title = \"Close Order Confirmation\";\n    modalRef.componentInstance.message = \"Are you sure you want to close the order \"\n          + this.order.name + \" for the store \" + this.order.customer.store.name + \" ?\";\n\n    modalRef.result.then((response) => {\n      if (response) {\n        this.orderService.closeOrder(this.order.id).subscribe(\n          data => {\n            this.order.closeDatetime = data.closeDateTime;\n            this.order.status = data.status;\n          }\n        )\n      }\n    })\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVyLXBhbmVsL3Nob3ctb3JkZXIvc2hvdy1vcmRlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div>\\n  <show-order-header\\n    [order]=\\\"order\\\"\\n    (onCloseOrderEvent)=\\\"onCloseOrder()\\\"\\n    (onAddOrderItemEvent)=\\\"onOrderItemAdded()\\\"\\n  ></show-order-header>\\n  <list-order-item *ngIf=\\\"order\\\"\\n    [order]=\\\"order\\\"\\n    [orderItems]=\\\"order.aggregatedOrderItems.values()\\\"\\n    (onCreateOrderItemEvent)=\\\"onNewOrderItem($event)\\\"\\n    (onChangeOrderItemEvent)=\\\"onChangeOrderItem($event)\\\"\\n    (onDeleteOrderItemEvent)=\\\"onDeleteOrderItem($event)\\\"\\n  ></list-order-item>\\n  <div class=\\\"container=fluid\\\">\\n    <button class=\\\"btn btn-primary\\\"\\n        (click)=\\\"onClickBack()\\\"\\n        style=\\\"float: right\\\"\\n    >Back</button>\\n</div>\\n</div>\"","import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { OrderService } from '../../service/order-service';\nimport { OrderItem } from '../../model/OrderItem'\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\n\n@Component({\n  \n  selector: 'show-order',\n  templateUrl: './show-order.component.html',\n  styleUrls: ['./show-order.component.css'],\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class ShowOrderComponent implements OnInit {\n\n  reportId: number = 1;\n  order: AggregatedOrder;\n\n  constructor(private orderService: OrderService,\n              private route: ActivatedRoute,\n              private router: Router) { }\n\n  ngOnInit() {\n    this.order = new AggregatedOrder();\n    this.order.id = parseInt(this.route.snapshot.paramMap.get('id'));\n    this.refreshOrder();\n  }\n\n  onOrderItemAdded(orderItem: OrderItem) {\n    this.refreshOrder();\n  }\n\n  onChangeOrderItem(orderItem: OrderItem) {\n    //this.order.items.set(orderItem.id, orderItem)\n  }\n\n  onDeleteOrderItem(ids: number[]) {\n    this.refreshOrder();\n  }\n\n  onClickBack() {\n    this.router.navigate([''])\n  }\n\n  private refreshOrder() {\n    this.orderService.getOrder(this.order.id).subscribe(data => {\n      this.order = AggregatedOrder.fromJson(data);\n    })  \n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVycy1tYW5hZ2VyLXBhbmVsL2xpc3Qtb3JkZXJzL2xpc3Qtb3JkZXJzLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"table-responsive\\\">\\n    <table class=\\\"table table-striped\\\">\\n        <thead>\\n            <tr>\\n                <th>ID</th>\\n                <th>Name</th>\\n                <th>Store</th>\\n                <th>Status</th>\\n                <th>Total Product</th>\\n                <th>Total Qty</th>\\n                <th>Total Price</th>\\n                <th>Creation Date</th>\\n                <th>Last Modified Date</th>\\n                <th>Close Date</th>\\n                <th></th>\\n                <th></th>\\n            </tr>\\n        </thead>\\n        <tbody>\\n            <tr *ngFor=\\\"let order of ordersArray\\\">\\n                <td>{{ order.id }}</td>\\n                <td>{{ order.name }}</td>\\n                <td>{{ order.customer.store.name }}</td>\\n                <td>{{ order.status }}</td>\\n                <td>{{ order.aggregatedOrderInfo.productSize }}</td>\\n                <td>{{ order.aggregatedOrderInfo.orderItemSize }}</td>\\n                <td>{{ order.aggregatedOrderInfo.totalPrice }} €</td>\\n                <td>{{ order.createdDatetime  | date:'medium' }}</td>\\n                <td>{{ order.lastModifiedDatetime  | date:'medium' }}</td>\\n                <td>{{ order.closeDatetime  | date:'medium' }}</td>\\n                <td><button\\n                    class=\\\"btn btn-success\\\"\\n                    [routerLink]=\\\"['/order', order.id]\\\"\\n                    >See</button>\\n                </td>\\n                <td><button\\n                    *ngIf=\\\"order.status !== 'CLOSED'\\\"\\n                    class=\\\"btn btn-info\\\"\\n                    (click)=\\\"onClickCloseOrder(order)\\\"\\n                    >Close Order</button>\\n                    <button\\n                        *ngIf=\\\"order.status === 'CLOSED'\\\"\\n                        class=\\\"btn btn-primary\\\"\\n                        (click)=\\\"onClickNotify(order)\\\"\\n                    >Notify</button>\\n                </td>\\n            </tr>\\n        </tbody>\\n    </table>\\n</div>\\n<div class=\\\"row justify-content-between\\\">\\n    <div class=\\\"col-4\\\">\\n        <ngb-pagination [collectionSize]=\\\"collectionSize\\\" [(page)]=\\\"page\\\" [pageSize]=\\\"pageSize\\\"></ngb-pagination>\\n    </div>\\n    <div class=\\\"col-2\\\">\\n        <select class=\\\"custom-select\\\" [(ngModel)]=\\\"pageSize\\\">\\n            <option [ngValue]=\\\"5\\\">5 items per page</option>\\n            <option [ngValue]=\\\"10\\\">10 items per page</option>\\n            <option [ngValue]=\\\"20\\\">20 items per page</option>\\n        </select>\\n    </div>\\n</div>\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { OrderService } from 'src/app/service/order-service';\nimport { NotificationService } from 'src/app/service/notification-service';\nimport { ModalBuilder } from 'src/app/common-components/modal-builder';\nimport { ConfirmModalComponent } from 'src/app/modal/confirm-modal/confirm-modal-component';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\nimport { OrderNotificationModalComponent } from 'src/app/modal/order-notification-modal/order-notification-modal.component';\n\n@Component({\n  selector: 'list-orders',\n  templateUrl: './list-orders.component.html',\n  styleUrls: ['./list-orders.component.css']\n})\nexport class ListOrdersComponent implements OnInit {\n\n  @Input() orders: AggregatedOrder[]\n\n  page: number = 1\n  pageSize: number = 10\n  collectionSize: number\n\n  constructor(private orderService: OrderService,\n              private notificationService: NotificationService,\n              private modalBuilder: ModalBuilder) {}\n\n  ngOnInit() {\n    this.collectionSize = this.orders.length\n  }\n\n  onClickCloseOrder(orderToClose: AggregatedOrder) {\n    let modalRef = this.modalBuilder.open(ConfirmModalComponent);\n    modalRef.componentInstance.title = \"Close Order Confirmation\";\n    modalRef.componentInstance.message = \"Are you sure you want to close the order \"\n          + orderToClose.name + \" for the store \" + orderToClose.customer.store.name + ' ?';\n\n    modalRef.result.then((response) => {\n      if (response) {\n        this.orderService.closeOrder(orderToClose.id).subscribe(\n          data => {\n            orderToClose.closeDatetime = data.closeDateTime\n            orderToClose.status = data.status\n          }\n        )\n      }\n    });\n  }\n\n  onClickNotify(order: AggregatedOrder) {\n    let modalRef = this.modalBuilder.open(OrderNotificationModalComponent);\n    modalRef.componentInstance.orderId = order.id;\n  }\n\n  get ordersArray(): AggregatedOrder[] {\n    return this.orders\n              .slice((this.page - 1) * this.pageSize, (this.page -1) * this.pageSize + this.pageSize)\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVycy1tYW5hZ2VyLXBhbmVsL29yZGVycy1tYW5hZ2VyL29yZGVycy1tYW5hZ2VyLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row justify-content-between\\\">\\n        <div class=\\\"col-4\\\">\\n            <button class=\\\"btn btn-primary\\\"\\n                (click)=\\\"openCreateReportModal()\\\"\\n            >New Order</button>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <div class=\\\"row justify-content-end\\\">\\n                <div class=\\\"col-6\\\">\\n                    <input #searchString type=\\\"text\\\"\\n                        class=\\\"form-control\\\"\\n                        (keyup.enter)=\\\"onClickSearch(searchString.value)\\\"\\n                        placeholder=\\\"Type to search order...\\\">\\n                </div>\\n                <div class=\\\"col-4\\\">\\n                    <button\\n                        [disabled]=\\\"searchButtonDisabled\\\"\\n                        class=\\\"btn btn-info search_button\\\"\\n                        (click)=\\\"onClickSearch(searchString.value)\\\"\\n                    >Search</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <br>\\n    <h3 style=\\\"color: dimgray\\\" *ngIf=\\\"orders.length == 0\\\">{{ noOrdersFoundMessage }}</h3>\\n    <div *ngIf=\\\"orders.length > 0\\\">\\n        <list-orders\\n            [orders]=\\\"orders\\\"\\n        ></list-orders>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { OrderService } from 'src/app/service/order-service';\nimport { ModalBuilder } from 'src/app/common-components/modal-builder';\nimport { CreateOrderModalComponent } from 'src/app/modal/create-order-modal/create-order-modal.component';\nimport { AggregatedOrder } from 'src/app/model/AggregatedOrder';\n\n@Component({\n  selector: 'orders-manager',\n  templateUrl: './orders-manager.component.html',\n  styleUrls: ['./orders-manager.component.css']\n})\nexport class OrdersManagerComponent implements OnInit {\n\n  orders: AggregatedOrder[] = []\n  noOrdersFoundMessage: string\n  searchButtonDisabled: boolean = false\n  isOrderListFiltered: boolean = false\n\n  constructor(private orderService: OrderService,\n              private modalBuilder: ModalBuilder) { }\n\n  ngOnInit() {\n    this.getAllOrders()\n  }\n\n  onClickSearch(value: string) {\n    if (value.length > 0) {\n      this.searchButtonDisabled = true\n      this.isOrderListFiltered = true\n      this.getOrderByName(value)\n    } else if (value.length == 0 && this.isOrderListFiltered) {\n      this.searchButtonDisabled = true\n      this.getAllOrders()\n      this.isOrderListFiltered = false\n    }\n  }\n\n  private getOrderByName(name: string) {\n    this.orderService.getOrderByName(name).subscribe(\n      data => {\n        this.orders = this.parseOrderIntoArray(data)\n        this.searchButtonDisabled = false\n      }, error => {\n        console.log(\"error in search : \" + error);\n      }\n    )\n  }\n\n  private getAllOrders() {\n    this.orderService.getAllOrders().subscribe(\n      data => {\n          this.orders = this.parseOrderIntoArray(data)\n          if (this.orders.length == 0) {\n            this.noOrdersFoundMessage = \"No order found\"\n          }\n      }\n    ) \n  }\n\n  private parseOrderIntoArray(data: any) : AggregatedOrder[] {\n    let orders: AggregatedOrder[] = []\n    for (let i = 0; i < data.length ; i++) {\n      let item = AggregatedOrder.fromJson(data[i]);\n      orders.push(item)\n    }\n    return orders\n  }\n\n  openCreateReportModal() {\n    const modalRef = this.modalBuilder.open(CreateOrderModalComponent)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './http-service';\nimport { AdminSetting } from '../model/admin/AdminSetting'\nimport { Observable } from 'rxjs';\n\n\n@Injectable()\nexport class AdminSettingService {\n\n    constructor(private httpApi: HttpService) {}\n\n    getAdminSetting(adminSetting: AdminSetting) : Observable<any> {\n        console.log(\"Get admin setting.\");\n        return this.httpApi.get(\"/v1/admin/setting/get\")\n    }\n\n    updateAdminSetting(adminSetting: AdminSetting): Observable<any> {\n        console.log(\"Update admin setting \" + adminSetting);\n        return this.httpApi.post(\"v1/admin/setting/update\", adminSetting)\n    }\n}\n","\nimport { Observable } from 'rxjs';\nimport { HttpService } from './http-service';\nimport { Injectable } from '@angular/core';\nimport { AddCustomerReq } from '../model/request/customer/AddCustomerReq';\n\n@Injectable()\nexport class CustomerService {\n\n    private url: string = \"v1/customer\";\n\n    constructor(private http: HttpService) {\n    }\n\n    addCustomer(req: AddCustomerReq): Observable<any> {\n        return this.http.post(this.url + \"/add\", req);\n    }\n    \n    getStoresOfOwner(ownerId: number): Observable<any> {\n        return this.http.get(this.url + \"/storesOfOwner/\" + ownerId);\n    }\n    getAllCustomers(): Observable<any> {\n        return this.http.get(this.url + \"/all\");\n    }\n\n    getAllOwnersIdsAndNames(): Observable<any>{\n        return this.http.get(this.url + \"/allOwnerIdsAndNames\");\n    }\n}","import { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class HttpService {\n\n    constructor(private http: HttpClient){}\n\n    get(url: string) : Observable<any> {\n        return this.http.get(url)\n    }\n\n    post(url: string, body: any) : Observable<any> {\n        return this.http.post(url, body, this.getHeaders());\n    }\n\n    delete(url: string) : Observable<any> {\n        return this.http.delete(url, this.getHeaders());\n    }\n\n    private getHeaders() {\n        let httpHeaders = new HttpHeaders()\n            .set('Content-Type', 'application/json')\n        let options = {\n            headers: httpHeaders\n        }; \n        return options\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpService } from './http-service';\nimport { Observable } from 'rxjs';\nimport { OrderNotificationRequest } from '../model/request/notification/OrderNotificationRequest';\n\n@Injectable()\nexport class NotificationService {\n\n    private url: string = \"v1/notification\";\n\n    constructor(private httpApi: HttpService) {}\n\n    notifyOrder(req: OrderNotificationRequest): Observable<any> {\n        return this.httpApi.post(this.url + \"/order-notification\", req);\n    }\n\n    getNotificationTypes(): Observable<any> {\n        return this.httpApi.get(this.url + \"/notification-types\");\n    }\n} ","\nimport { Injectable } from '@angular/core'\nimport { HttpService } from './http-service'\nimport { Order } from \"../model/Order\";\nimport { Observable } from 'rxjs';\nimport { AddOrderItemReq } from '../model/request/order/AddOrderItemReq';\nimport { OrderItem } from '../model/OrderItem';\nimport { DeleteOrderItemsReq } from '../model/request/order/DeleteOrderItemsReq';\nimport { AddOrderItemByBarCodeReq } from '../model/request/order/AddOrderItemByBarCodeReq';\n\n@Injectable()\nexport class OrderService {\n\n    constructor(private httpApi: HttpService){}\n\n    addOrder(order: Order): Observable<any> {\n        const request = {\n            \"name\": order.name,\n            \"customerId\": order.customer.id,\n            \"comment\": order.comment\n        }\n        return this.httpApi.post(\"/v1/order/add\", request)\n    }\n\n    getOrder(id: number): Observable<any> {\n        console.log(\"Get order by id \" + id);\n        return this.httpApi.get(\"/v1/order/get/\" + id);\n    }\n\n    getOrderByName(name: string): Observable<any> {\n        console.log(\"Get order by name : \" + name);\n        return this.httpApi.get(\"/v1/order/searchByName/\" + name);\n    }\n\n    getOrdersOfCustomer(id: number): Observable<any> {\n        console.log(\"Get orders of customer \" + id);\n        return this.httpApi.get(\"/v1/order/ordersOfCustomer/\" + id);\n    }\n\n    addOrderItem(req: AddOrderItemReq) : Observable<any> {\n        console.log(\"Add order item[ \" + \", \" + req.requestedQty + \" to order \" + req.orderId);\n        return this.httpApi.post(\"/v1/order/addOrderItemByInfo\", req);\n    }\n\n    addOrderItemByBarCode(req: AddOrderItemByBarCodeReq) : Observable<any> {\n        console.log(\"Add order item by barCode to order \" + req.orderId + \" : \" + req.barCode);\n        return this.httpApi.post(\"/v1/order/addSingleOrderItemsByBarCode\", req);\n    }\n\n    updateStockItem(order: Order, itemToUpdate: OrderItem): Observable<any> {\n        console.log(\"updateProductItem order \" + order.id + \" | \" + itemToUpdate)\n        //return this.httpApi.post(\"/v1/order/updateProductItem\", this.toUpdateRequest(order, itemToUpdate))\n        return null;\n    }\n\n    deleteOrderItems(req: DeleteOrderItemsReq): Observable<any> {\n        console.log(\"Delete OrderItems from order : \" + req.orderId + \" : \" + req.orderItemsId)\n        return this.httpApi.post(\"/v1/order/deleteOrderItems\", req);\n    }\n\n    closeOrder(orderId: number): Observable<any> {\n        console.log(\"Close order : \" + orderId)\n        let request = { \"id\" : orderId }\n        return this.httpApi.post(\"/v1/order/close\", request);\n    }\n\n    getAllOrders(): Observable<any> {\n        console.log(\"Get all reports\")\n        return this.httpApi.get(\"/v1/order/all\")\n    } \n}\n","import { Injectable } from '@angular/core';\nimport { HttpService } from './http-service';\nimport { Observable } from 'rxjs';\nimport { Product } from '../model/Product';\n\n@Injectable()\nexport class ProductService {\n\n    constructor(private http: HttpService) {\n    }\n\n    get(id: number): Observable<any> {\n        return this.http.get(\"/v1/productItem/get/\" + id)\n    }\n\n    getAllProductNames(): Observable<any> {\n        return this.http.get(\"/v1/stock/getAllExistingProductNames\")\n    }\n\n    getProductStockInfo(productId: number): Observable<any> {\n        return this.http.get(\"/v1/stock/productStockInfo/\" + productId);\n    }\n\n    getProductItemByBarCode(barCode: string): Observable<Product> {\n        return this.http.get(\"/v1/stock/productItemByBarCode/\" + barCode);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser'\nimport { FilterPipe } from './common-components/pipe/FilterPipe';\n\n@NgModule({\n    imports:[\n        BrowserModule\n    ],\n    declarations: [\n        FilterPipe\n    ],\n    providers:[\n        // service\n    ],\n    exports:[\n        FilterPipe\n    ],\n})\nexport class SharedModule {}","export class StringUtil {\n\n    static capitalFirstLetter(word: string) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    }\n}","export class TypeUtil {\n\n    static toBoolean(str: string): boolean {\n        return str.toLowerCase() == 'true';\n    }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}